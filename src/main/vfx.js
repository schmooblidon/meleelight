/* eslint-disable */
import {stage, vfxQueue, player, drawVfx, startTimer,fg2} from "main/main";
import {drawArrayPath, drawArrayPathNew} from "main/render";
import {Vec2D} from "main/characters";
import {swordSwings} from "main/swordSwings";
import {sounds} from "main/sfx";
const twoPi = Math.PI * 2;

export const vfx = {
  impactLand : {
    name : "impactLand",
    //colour : "rgba(#ffffff,",
    colour : [255,255,255],
    frames : 8,
    path : [[[-157,-29],[-94,-5],[-154,-52],[-90,-9],[-145,-51],[-161,-85],[-99,-43],[-137,-78],[-115,-73],[-91,-59],[-155,-110],[-108,-84],[-150,-134],[-109,-108],[-136,-136],[-70,-89],[-94,-125],[-68,-95],[-91,-144],[-59,-109],[-83,-146],[-36,-92],[-38,-126],[-20,-105],[-2,-115],[10,-108],[18,-131],[29,-90],[96,-146],[64,-104],[100,-134],[77,-90],[105,-108],[59,-62],[95,-89],[90,-72],[66,-45],[106,-78],[90,-47],[128,-70],[92,-39],[163,-81],[143,-47],[102,-18],[161,-51],[113,-12],[164,-28],[113,4],[67,49],[15,70],[-13,69],[-57,54],[-111,10],[0,0],[-111,10],[-139,-8]],[[-213,-28],[-145,1],[-205,-46],[-145,-12],[-198,-50],[-214,-84],[-151,-41],[-190,-74],[-169,-72],[-139,-59],[-211,-109],[-159,-81],[-196,-109],[-207,-137],[-152,-103],[-189,-135],[-94,-74],[-129,-123],[-100,-93],[-115,-118],[-123,-145],[-95,-113],[-115,-148],[-65,-89],[-65,-119],[-31,-95],[-1,-114],[25,-100],[51,-119],[58,-86],[132,-143],[103,-107],[145,-140],[130,-110],[110,-89],[141,-112],[127,-92],[191,-135],[159,-106],[199,-125],[188,-103],[172,-90],[209,-110],[151,-65],[182,-78],[183,-69],[157,-48],[213,-85],[197,-49],[168,-29],[214,-54],[159,-9],[215,-27],[177,2],[115,15],[65,51],[17,65],[-15,65],[-65,52],[-119,16],[0,0],[-119,16],[-188,1]],[[-264,-30],[-199,-2],[-260,-51],[-192,-11],[-246,-49],[-261,-81],[-203,-44],[-243,-75],[-220,-72],[-182,-55],[-257,-107],[-216,-85],[-243,-105],[-254,-135],[-209,-105],[-241,-139],[-159,-80],[-167,-95],[-139,-63],[-153,-93],[-130,-79],[-159,-121],[-134,-95],[-149,-122],[-160,-152],[-124,-112],[-155,-157],[-102,-101],[-81,-88],[-87,-105],[-82,-103],[-84,-128],[-79,-115],[-76,-125],[-66,-106],[-50,-116],[-20,-97],[3,-113],[18,-101],[51,-120],[54,-98],[76,-121],[76,-111],[96,-126],[91,-116],[102,-117],[97,-102],[171,-150],[140,-108],[186,-148],[173,-117],[150,-91],[187,-124],[141,-69],[241,-139],[208,-108],[257,-132],[240,-106],[222,-91],[260,-112],[199,-66],[239,-82],[239,-73],[204,-43],[266,-87],[247,-52],[198,-17],[259,-52],[206,-12],[266,-29],[240,-5],[139,4],[66,47],[1,54],[-71,48],[-141,10],[0,0],[-141,10],[-241,-3]],[[-311,-30],[-245,-2],[-302,-50],[-243,-15],[-290,-47],[-310,-85],[-251,-46],[-290,-80],[-266,-72],[-225,-53],[-304,-110],[-267,-89],[-288,-105],[-298,-130],[-250,-103],[-288,-137],[-189,-71],[-199,-98],[-171,-67],[-185,-96],[-162,-80],[-201,-133],[-169,-99],[-181,-121],[-192,-152],[-159,-118],[-181,-158],[-121,-87],[-101,-98],[-98,-116],[-86,-103],[-93,-129],[-77,-104],[-26,-116],[38,-115],[77,-97],[101,-119],[94,-101],[113,-106],[114,-95],[104,-71],[205,-152],[181,-116],[224,-148],[208,-119],[188,-95],[226,-127],[180,-75],[204,-91],[202,-81],[290,-139],[250,-106],[301,-134],[284,-106],[261,-89],[309,-114],[247,-66],[280,-81],[254,-49],[313,-84],[296,-51],[256,-26],[310,-56],[272,-27],[311,-31],[282,-2],[156,-3],[63,33],[-50,35],[-156,4],[1,-1],[-156,4],[-281,-1]],[[-359,-35],[-294,-4],[-348,-50],[-287,-14],[-330,-45],[-351,-85],[-296,-45],[-330,-80],[-280,-61],[-351,-112],[-302,-86],[-333,-108],[-342,-131],[-302,-110],[-331,-138],[-216,-61],[-233,-102],[-199,-62],[-217,-95],[-187,-78],[-234,-137],[-199,-103],[-219,-133],[-226,-159],[-195,-126],[-217,-164],[-151,-88],[-123,-105],[-105,-104],[-108,-127],[-95,-106],[-37,-121],[30,-122],[84,-104],[113,-120],[99,-102],[121,-104],[162,-88],[248,-159],[215,-118],[261,-154],[245,-125],[228,-101],[268,-136],[218,-78],[242,-97],[237,-79],[329,-141],[294,-107],[346,-133],[327,-105],[305,-91],[351,-116],[293,-69],[329,-80],[304,-58],[353,-84],[339,-54],[304,-27],[350,-55],[306,-21],[353,-32],[327,0],[166,-1],[67,22],[-55,21],[-159,5],[0,0],[-159,5],[-326,-1]],[[-392,-38],[-327,-5],[-382,-50],[-321,-13],[-369,-54],[-387,-90],[-322,-42],[-362,-79],[-321,-59],[-383,-109],[-334,-86],[-367,-109],[-380,-136],[-328,-105],[-365,-141],[-242,-53],[-263,-99],[-219,-58],[-241,-88],[-217,-81],[-201,-64],[-261,-139],[-227,-106],[-249,-141],[-258,-173],[-222,-129],[-244,-168],[-186,-103],[-131,-118],[-120,-126],[-108,-119],[-43,-128],[51,-126],[130,-106],[167,-110],[163,-101],[194,-94],[281,-164],[249,-125],[295,-162],[282,-131],[260,-107],[302,-139],[255,-87],[282,-98],[258,-67],[362,-139],[326,-106],[377,-133],[343,-89],[387,-115],[308,-57],[364,-83],[325,-45],[389,-86],[368,-52],[316,-14],[387,-58],[320,-6],[388,-33],[354,2],[164,2],[86,9],[-1,9],[-109,10],[-180,3],[0,0],[-180,3],[-365,-2]],[[-417,-29],[-349,1],[-419,-56],[-350,-10],[-398,-48],[-416,-82],[-353,-38],[-397,-78],[-338,-51],[-416,-111],[-366,-83],[-399,-109],[-412,-135],[-356,-102],[-404,-142],[-257,-40],[-279,-62],[-290,-103],[-240,-52],[-275,-99],[-253,-88],[-225,-62],[-289,-138],[-245,-94],[-273,-136],[-281,-169],[-247,-129],[-271,-167],[-204,-91],[-153,-114],[-135,-128],[-121,-118],[-51,-140],[38,-141],[113,-115],[155,-119],[159,-105],[203,-88],[298,-164],[264,-117],[312,-158],[301,-129],[276,-102],[318,-141],[268,-81],[299,-99],[284,-73],[318,-101],[313,-89],[393,-141],[346,-103],[402,-135],[391,-114],[357,-86],[407,-118],[342,-66],[388,-84],[345,-42],[413,-89],[394,-56],[344,-18],[407,-56],[351,-11],[411,-34],[388,-2],[147,-1],[26,9],[-41,9],[-177,0],[0,10],[-177,0],[-396,2]],[[-429,-32],[-372,-2],[-426,-48],[-364,-13],[-411,-50],[-429,-87],[-366,-39],[-405,-79],[-348,-52],[-429,-115],[-383,-88],[-408,-107],[-421,-131],[-380,-108],[-411,-140],[-288,-53],[-297,-70],[-282,-55],[-302,-109],[-264,-71],[-283,-100],[-256,-87],[-295,-141],[-265,-115],[-289,-146],[-297,-167],[-255,-130],[-281,-172],[-216,-97],[-132,-127],[-131,-136],[-110,-124],[-47,-147],[49,-147],[121,-124],[167,-133],[166,-116],[219,-97],[320,-171],[283,-122],[334,-164],[320,-134],[286,-96],[338,-143],[268,-67],[322,-105],[288,-57],[344,-112],[330,-86],[409,-143],[377,-109],[424,-138],[413,-114],[385,-86],[431,-117],[349,-55],[414,-88],[373,-48],[433,-92],[416,-58],[369,-23],[434,-62],[369,-6],[435,-36],[407,-3],[-1,-1],[-405,-1]]]
  },

  circleDust : {
    name : "circleDust",
    colour : "white",
    frames : 30,
    circles : [0,0,0,0]
  },

  flyingDust : {
    name : "flyingDust",
    colour : "white",
    frames : 30
  },

  dashDust : {
    name : "dashDust",
    colour : [255,255,255],
    frames : 8,
    path : [[[-84,-287],[107,-135],[-161,-296],[5,-153],[-57,-173],[-15,-138],[-198,-218],[51,-86],[-33,-86],[43,-59],[-184,-80],[39,-36],[-157,-15],[0,0],[-157,-15],[257,-8],[308,-30]],[[172,-92],[189,-65],[98,-124],[174,-63],[118,-89],[166,-53],[90,-88],[138,-58],[99,-73],[154,-38],[130,-41],[55,-105],[73,-76],[25,-102],[70,-62],[-3,-96],[73,-34],[-13,-45],[81,-13],[0,0],[81,-13],[163,-13],[245,-21]],[[185,-112],[201,-66],[151,-110],[189,-60],[131,-119],[172,-65],[88,-119],[168,-56],[124,-75],[150,-51],[102,-75],[56,-123],[71,-92],[61,-93],[68,-84],[39,-104],[68,-72],[3,-117],[53,-68],[4,-85],[43,-59],[-29,-79],[31,-49],[-39,-50],[19,-39],[-29,-35],[91,-9],[0,0],[91,-9],[138,-13],[239,-17]],[[203,-67],[153,-126],[179,-69],[116,-112],[152,-71],[55,-127],[90,-83],[16,-115],[57,-75],[-109,-182],[4,-63],[-64,-86],[-5,-56],[-75,-61],[-5,-42],[-95,-45],[-10,-28],[-50,-23],[59,-11],[0,0],[59,-11],[159,-12],[221,-16]],[[190,-56],[124,-126],[147,-75],[117,-99],[140,-71],[59,-142],[131,-71],[24,-137],[92,-81],[10,-116],[86,-65],[-119,-178],[-35,-108],[-104,-136],[-24,-81],[-97,-83],[-22,-55],[-92,-60],[-37,-42],[-137,-53],[-64,-30],[-107,-24],[79,-8],[0,0],[79,-8],[170,-12],[198,-23]],[[160,-71],[118,-97],[121,-69],[40,-118],[69,-93],[20,-119],[98,-69],[69,-84],[92,-59],[10,-106],[87,-51],[11,-80],[-86,-180],[-46,-124],[-127,-176],[-52,-111],[-79,-126],[-60,-104],[-147,-151],[-92,-106],[-131,-123],[-95,-98],[-144,-113],[-55,-61],[-98,-76],[-61,-50],[-114,-62],[-77,-41],[-165,-48],[-86,-28],[-163,-28],[62,1],[0,0],[62,1],[156,-10],[183,-26]],[[136,-73],[85,-114],[119,-77],[32,-131],[96,-79],[17,-119],[72,-72],[-1,-104],[43,-64],[-16,-77],[-139,-182],[-81,-115],[-119,-139],[-90,-104],[-177,-167],[-133,-121],[-186,-136],[-109,-98],[-170,-101],[-96,-60],[-206,-49],[-92,-40],[-161,-34],[-89,-27],[-205,-19],[-25,-3],[88,-6],[0,0],[88,-6],[163,-34]],[[99,-49],[17,-112],[57,-69],[-11,-93],[32,-67],[-9,-75],[-3,-61],[-137,-161],[-87,-90],[-129,-97],[-85,-67],[-133,-77],[-88,-58],[-175,-64],[-77,-44],[-161,-44],[-86,-31],[-204,-29],[-67,-9],[43,-3],[0,0],[43,-3],[112,-15]]]
  },
  doubleJumpRings : {
    name : "doubleJumpRings",
    colour : "#63beff",
    frames : 8,
    rings : [0,0,0]
  },
  blastzoneExplosion : {
    name : "blastzoneExplosion",
    frames : 20,
    path1 : [[-112,-53],[-117,-82],[-107,-78],[-106,-124],[-86,-72],[-80,-138],[-69,-86],[-63,-122],[-58,-85],[-56,-159],[-43,-89],[-36,-129],[-30,-108],[-26,-165],[-13,-111],[0,-173],[6,-118],[20,-183],[31,-104],[51,-156],[51,-92],[63,-125],[63,-84],[78,-147],[79,-79],[89,-101],[90,-78],[102,-112],[100,-60],[106,-75],[106,-60],[118,-82],[104,-7],[97,-23],[88,0],[89,-41],[83,-28],[79,-41],[73,-10],[71,-39],[66,-10],[62,-38],[57,-15],[54,-41],[49,-31],[46,-44],[35,-30],[31,-63],[25,-47],[23,-57],[13,-25],[7,-55],[0,-28],[-9,-57],[-12,-41],[-15,-53],[-17,-23],[-32,-54],[-36,-33],[-44,-52],[-44,-26],[-50,-49],[-53,-15],[-60,-38],[-62,-25],[-67,-32],[-71,-14],[-82,-32],[-84,-22],[-89,-27],[-90,-10],[-96,-15],[-96,-4]],
    path2 : [[-35,-678],[-34,-103],[-30,-587],[-24,-213],[-22,-672],[-19,-523],[-17,-717],[-15,-485],[-12,-533],[-12,-313],[-9,-671],[-4,-471],[-2,-674],[2,-549],[3,-696],[6,-516],[10,-764],[13,-396],[17,-718],[22,-225],[26,-605],[31,-415],[35,-698],[35,-173],[40,-512],[39,-238],[45,-445],[45,0],[-44,0]],
    path3 : [[-46,-497],[-43,-95],[-35,-436],[-29,-237],[-24,-538],[-18,-329],[-16,-400],[-13,-329],[-11,-521],[-4,-291],[-2,-521],[5,-355],[9,-580],[17,-288],[22,-537],[24,-352],[28,-449],[28,-201],[33,-417],[37,-307],[43,-530],[47,-99],[50,-409],[54,-300],[55,-362],[56,0],[-55,0]],
    path4 : [[-8,-822],[8,0],[-8,0]],
    svg2Active : [1,3],
    svg3Active : [4,19],
    svg2Scale : [[1,1],[1.3,0.7],[0.7,1.5]],
    svg3Scale : [[1,0.1],[1,1],[1.3,0.7],[0.5,1.5],[1,1],[1.2,0.5],[1,0.8],[0.7,1.3],[0.5,1.5],[0.7,1.3],[1.2,0.8],[1.6,0.4],[1,1],[0.5,1.5],[0.2,1.5],[0.1,1.5]]

  },
  cliffcatchspark : {
    name : "cliffcatchspark",
    colour : "#63beff",
    frames : 12
  },
  swing : {
    name : "swing",
    colour : "rgb(77, 201, 255)",
    frames : 5
  },
  hitFlair : {
    name : "hitFlair",
    frames : 8
  },
  hitSparks : {
    name : "hitSparks",
    frames : 3,
    path1 : [[-35,-59],[-96,-226],[-69,-200],[-95,-317],[-42,-191],[-82,-426],[-25,-207],[-10,-275],[11,-164],[74,-407],[63,-179],[96,-246],[90,-187],[135,-310],[68,-89],[104,-153],[66,-54],[144,-120],[107,-74],[153,-87],[78,-9],[193,-48],[146,-20],[191,-13],[122,8],[210,31],[115,45],[156,55],[116,62],[137,86],[97,84],[123,129],[64,87]],
    path2 : [[212,-99],[315,-168],[278,-130],[343,-150],[296,-118],[363,-139],[302,-93],[320,-82],[306,-75],[390,-77],[239,-48],[278,-73],[251,-75],[274,-85],[208,-65],[259,-95],[228,-93],[261,-113],[212,-99]]
  },
  hitCurve : {
    name : "hitCurve",
    frames : 10,
    svg : "M-31.706,133.877c0,0,41.958-39.632,45.247-135.092c3.288-95.459-43.856-144.771-43.856-144.771S19.189-1.544-31.706,133.877"
  },
  groundBounce : {
    name : "groundBounce",
    frames : 8,
    //colour : "#66ff38",
    colour : [102,255,56],
    path : [[[0,0],[-94,0],[-207,-259],[-110,-81],[-120,-116],[-77,-51],[-155,-184],[-95,-109],[-99,-171],[-63,-76],[-72,-128],[-53,-81],[-89,-287],[-41,-108],[-35,-177],[-20,-125],[-22,-419],[-5,-170],[8,-227],[10,-130],[17,-208],[23,-123],[58,-303],[49,-161],[105,-433],[64,-144],[81,-223],[61,-100],[74,-123],[70,-96],[91,-165],[83,-117],[115,-182],[95,-112],[157,-185],[94,-83],[113,-100],[104,-52],[143,-120],[127,-80],[187,-183],[165,-129],[189,-162],[96,-1]],[[0,0],[-168,-4],[-326,-135],[-165,-38],[-300,-162],[-176,-92],[-228,-175],[-88,-72],[-140,-200],[-92,-137],[-137,-377],[-59,-129],[-79,-316],[-23,-150],[-8,-211],[12,-149],[25,-187],[23,-88],[43,-184],[41,-137],[61,-253],[63,-146],[89,-207],[86,-118],[201,-380],[97,-74],[146,-97],[113,-59],[172,-94],[167,-79],[219,-133],[186,-59],[198,-59],[177,-27],[315,-125],[169,0]],[[0,0],[-227,-1],[-515,-148],[-220,-23],[-461,-171],[-283,-105],[-367,-167],[-253,-120],[-290,-161],[-140,-86],[-284,-376],[-128,-109],[-144,-201],[-117,-163],[-127,-241],[-107,-179],[-115,-261],[-38,-97],[-32,-185],[-19,-106],[-1,-143],[6,-104],[45,-312],[49,-119],[100,-202],[70,-121],[105,-142],[98,-110],[211,-336],[122,-57],[154,-84],[140,-57],[377,-171],[175,-34],[317,-101],[286,-68],[538,-189],[232,0]],[[0,0],[-281,0],[-448,-84],[-253,-45],[-610,-172],[-265,-73],[-382,-146],[-226,-75],[-303,-133],[-181,-81],[-264,-160],[-204,-133],[-352,-362],[-179,-153],[-90,-99],[-92,-208],[-50,-118],[-27,-233],[-5,-140],[14,-162],[34,-115],[119,-292],[94,-82],[215,-272],[151,-96],[226,-194],[173,-76],[439,-182],[243,-59],[448,-125],[210,-14],[558,-107],[275,2]],[[0,0],[-327,-2],[-622,-59],[-205,-20],[-540,-139],[-241,-53],[-575,-218],[-193,-75],[-353,-249],[-159,-62],[-196,-161],[-169,-123],[-291,-392],[-73,-63],[-77,-147],[-21,-54],[-34,-204],[0,-59],[5,-139],[17,-84],[59,-142],[52,-85],[135,-223],[144,-128],[192,-176],[197,-111],[313,-228],[202,-52],[396,-111],[342,-75],[552,-139],[315,-36],[361,-38],[328,-13],[616,-62],[329,0]],[[0,0],[-325,0],[-655,-44],[-315,-10],[-399,-51],[-266,-36],[-618,-137],[-253,-46],[-337,-108],[-196,-59],[-286,-164],[-182,-69],[-305,-257],[-177,-125],[-235,-265],[-82,-75],[-67,-114],[-64,-72],[-34,-360],[9,-105],[49,-176],[53,-69],[84,-141],[88,-80],[204,-161],[192,-132],[295,-200],[200,-47],[546,-153],[235,-20],[435,-46],[370,-10],[704,-52],[359,2]],[[0,0],[-394,1],[-694,-51],[-202,-16],[-625,-132],[-224,-38],[-339,-111],[-194,-51],[-285,-151],[-187,-69],[-323,-263],[-183,-124],[-246,-274],[-70,-55],[-90,-156],[-56,-97],[-34,-264],[19,-82],[59,-170],[51,-81],[96,-118],[91,-50],[213,-164],[208,-130],[309,-196],[185,-47],[539,-139],[257,-31],[355,-38],[314,-15],[661,-40],[378,2]],[[0,0],[-398,3],[-760,-25],[-323,-6],[-333,-15],[-80,-23],[-121,-41],[-16,-24],[-35,-41],[-1,-27],[25,-45],[21,-27],[162,-41],[148,-24],[306,-27],[246,-11],[546,-41],[421,-12],[838,-53],[403,4]]]
  },
  furaFura : {
    name : "furaFura",
    frames : 30
  },
  breakShield : {
    name : "breakShield",
    frames : 20
  },
  shieldup : {
    name : "shieldup",
    frames : 6
  },
  wallBounce : {
    name : "wallBounce"
  },
  ceilingBounce : {
    name : "ceilingBounce"
  },
  tech : {
    name : "tech",
    frames : 9
  },
  start : {
    name : "start",
    frames : 120
  },
  entrance : {
    name : "entrance",
    frames : 60
  },
  clank : {
    name : "clank",
    frames : 10
  },
  powershieldreflect : {
    name : "powershieldreflect",
    frames : 5
  },
  powershield : {
    name : "powershield",
    frames : 8
  },
  targetDestroy : {
    name : "targetDestroy",
    frames : 8
  },
  electrichit : {
    name : "electrichit",
    frames : 13
  },
  shocked : {
    name : "shocked",
    frames : 1
  },
  firehit : {
    name : "firehit",
    frames : 6
  },
  fireburst : {
    name : "fireburst",
    frames : 5
  },
  burning : {
    name : "burning",
    frames : 4
  },
  burncircle : {
    name : "burncircle",
    frames : 9
  },
  normalhit : {
    name : "normalhit",
    frames : 6,
    path1 : [[6,-112],[13,-69],[34,-83],[34,-51],[80,-81],[55,-27],[94,-39],[65,-11],[95,-2],[65,19],[112,46],[45,45],[68,95],[31,71],[38,112],[19,77],[10,92],[7,71],[-15,102],[-29,59],[-78,88],[-58,40],[-91,55],[-71,28],[-90,21],[-80,9],[-111,-1],[-68,-8],[-108,-45],[-61,-29],[-86,-81],[-25,-46],[-18,-89],[-4,-65]],
    path2 : [[124,-136],[56,-53],[131,-108],[39,-29],[112,-48],[44,-15],[159,-6],[46,7],[82,26],[48,18],[130,74],[42,27],[129,128],[24,32],[38,93],[13,41],[0,149],[-3,44],[-42,89],[-35,52],[-80,126],[-49,50],[-127,126],[-51,28],[-115,53],[-51,9],[-158,1],[-44,-10],[-131,-19],[-89,-32],[-133,-72],[-32,-29],[-127,-138],[-31,-53],[-61,-108],[-16,-41],[-20,-99],[-7,-37],[0,-149],[8,-57],[44,-99],[23,-43]],
    path3 : [[[72,-283],[84,-215],[152,-308],[18,-51]],[[230,-244],[179,-172],[109,-118]],[[285,-85],[172,-1],[206,23],[162,22],[299,143],[46,11],[94,-11],[65,-34]],[[249,227],[209,175],[163,146]],[[165,197],[78,111],[42,36]],[[42,333],[2,269],[-45,342],[2,47]],[[-48,132],[-70,151],[-26,65]],[[-170,148],[-212,242],[-37,40]],[[-216,79],[-168,77],[-133,45]],[[-326,58],[-216,19],[-339,-44],[-87,-23],[-43,-5]],[[-169,-140],[-225,-233],[-132,-149],[-41,-40]],[[-260,-107],[-289,-132],[-174,-76]],[[-115,-262],[-69,-226],[-24,-76]],[[-56,-295],[-44,-341],[-37,-233]],[[-7,-85],[2,-112],[1,-38]]]
  },
  shine : {
    name : "shine",
    frames : 3
  },
  shineloop : {
    name : "shineloop",
    frames : 1
  },
  firefoxcharge : {
    name : "firefoxcharge",
    frames : 1,
    path : [[[-30,-64],[-30,-64,-24,-36,-24,-36],[-24,-36,-21,-58,-21,-58],[-21,-58,-18,-71,-18,-71],[-18,-71,-4,-47,-4,-47],[-4,-53,-4,-64,-2,-69],[-2,-69,9,-34,9,-34],[10,-41,13,-60,16,-65],[16,-65,20,-41,20,-41],[20,-41,36,-64,36,-64],[36,-64,36,-47,36,-47],[36,-47,35,-38,35,-38],[35,-38,36,-33,36,-33],[38,-39,46,-57,50,-62],[50,-62,48,-30,48,-30],[48,-30,62,-51,62,-51],[62,-51,78,-72,78,-72],[78,-72,70,-36,70,-36],[72,-41,79,-55,84,-58],[84,-58,81,-26,81,-26],[81,-26,107,-60,107,-60],[107,-60,98,-37,98,-37],[101,-42,105,-47,110,-51],[108,-45,104,-39,101,-34],[101,-34,82,-2,82,-2],[80,2,74,15,70,17],[65,20,44,23,37,24],[10,27,-18,27,-45,24],[-45,24,-70,21,-70,21],[-73,20,-79,19,-81,17],[-84,15,-92,0,-94,-5],[-94,-5,-124,-61,-124,-61],[-117,-58,-101,-40,-95,-34],[-95,-34,-105,-56,-105,-56],[-105,-56,-86,-41,-86,-41],[-86,-41,-87,-64,-87,-64],[-87,-64,-87,-74,-87,-74],[-87,-74,-72,-43,-72,-43],[-72,-43,-70,-63,-70,-63],[-70,-63,-56,-32,-56,-32],[-56,-32,-58,-53,-58,-53],[-58,-53,-58,-64,-58,-64],[-58,-64,-42,-28,-42,-28],[-42,-28,-34,-77,-34,-77],[-34,-77,-30,-64,-30,-64]],[[-44,-41],[-44,-41,-42,-65,-42,-65],[-42,-65,-28,-44,-28,-44],[-28,-44,-27,-67,-27,-67],[-27,-67,-15,-35,-15,-35],[-15,-35,-8,-51,-8,-51],[-8,-51,0,-37,0,-37],[0,-43,1,-59,4,-63],[4,-63,11,-37,11,-37],[11,-37,13,-52,13,-52],[13,-52,25,-40,25,-40],[25,-40,33,-54,33,-54],[33,-54,36,-35,36,-35],[36,-35,57,-56,57,-56],[57,-56,72,-71,72,-71],[72,-71,63,-42,63,-42],[63,-42,83,-59,83,-59],[83,-59,72,-36,72,-36],[77,-41,84,-49,90,-52],[90,-52,81,-35,81,-35],[81,-35,116,-63,116,-63],[116,-63,100,-33,100,-33],[100,-33,128,-48,128,-48],[125,-41,113,-30,107,-24],[107,-24,90,-6,90,-6],[87,-2,81,5,76,8],[69,11,49,14,41,15],[41,15,17,17,17,17],[17,17,-28,17,-28,17],[-28,17,-63,13,-63,13],[-69,12,-82,9,-88,6],[-94,3,-102,-7,-107,-12],[-116,-21,-136,-41,-142,-50],[-142,-50,-99,-31,-99,-31],[-99,-31,-114,-64,-114,-64],[-114,-64,-78,-32,-78,-32],[-78,-32,-86,-61,-86,-61],[-86,-61,-75,-49,-75,-49],[-75,-49,-58,-28,-58,-28],[-58,-28,-65,-73,-65,-73],[-65,-73,-44,-41,-44,-41]],[[-3,-47],[-3,-47,0,-69,0,-69],[0,-69,8,-44,8,-44],[8,-44,23,-59,23,-59],[23,-59,21,-45,21,-45],[21,-45,48,-64,48,-64],[48,-64,39,-40,39,-40],[39,-40,63,-56,63,-56],[63,-56,58,-38,58,-38],[58,-38,74,-55,74,-55],[74,-55,69,-33,69,-33],[69,-33,89,-45,89,-45],[89,-45,108,-56,108,-56],[108,-56,97,-42,97,-42],[97,-42,110,-50,110,-50],[110,-50,97,-27,97,-27],[97,-27,136,-46,136,-46],[132,-41,118,-32,112,-28],[112,-28,132,-33,132,-33],[132,-33,142,-34,142,-34],[142,-34,101,-10,101,-10],[95,-6,79,4,74,6],[59,11,38,11,22,12],[22,12,12,13,12,13],[12,13,-30,13,-30,13],[-30,13,-43,12,-43,12],[-57,11,-75,10,-88,6],[-88,6,-134,-20,-134,-20],[-141,-23,-160,-34,-165,-38],[-165,-38,-126,-27,-126,-27],[-126,-27,-147,-49,-147,-49],[-147,-49,-104,-28,-104,-28],[-104,-28,-119,-48,-119,-48],[-119,-48,-89,-29,-89,-29],[-89,-29,-104,-61,-104,-61],[-104,-61,-77,-40,-77,-40],[-77,-40,-82,-58,-82,-58],[-82,-58,-58,-35,-58,-35],[-58,-35,-65,-57,-65,-57],[-65,-57,-43,-37,-43,-37],[-43,-37,-46,-53,-46,-53],[-46,-53,-16,-42,-16,-42],[-16,-42,-28,-70,-28,-70],[-28,-70,-3,-47,-3,-47]],[[-13,-38],[-13,-38,-14,-47,-14,-47],[-14,-47,8,-36,8,-36],[8,-36,11,-45,11,-45],[11,-45,13,-45,13,-45],[13,-45,16,-41,16,-41],[24,-33,25,-39,35,-44],[35,-44,35,-34,35,-34],[35,-34,79,-50,79,-50],[79,-50,66,-34,66,-34],[66,-34,99,-43,99,-43],[99,-43,93,-27,93,-27],[93,-27,129,-41,129,-41],[129,-41,117,-28,117,-28],[117,-28,145,-33,145,-33],[145,-33,123,-20,123,-20],[123,-20,153,-24,153,-24],[153,-24,166,-25,166,-25],[166,-25,147,-17,147,-17],[147,-17,157,-17,157,-17],[157,-17,133,-8,133,-8],[102,3,81,8,48,11],[48,11,28,13,28,13],[28,13,8,14,8,14],[8,14,-11,14,-11,14],[-11,14,-33,13,-33,13],[-33,13,-44,12,-44,12],[-44,12,-81,8,-81,8],[-92,7,-111,3,-122,-1],[-122,-1,-143,-11,-143,-11],[-143,-11,-166,-22,-166,-22],[-171,-24,-176,-26,-180,-29],[-180,-29,-154,-25,-154,-25],[-154,-25,-129,-20,-129,-20],[-129,-20,-151,-43,-151,-43],[-151,-43,-119,-28,-119,-28],[-119,-28,-127,-41,-127,-41],[-127,-41,-101,-28,-101,-28],[-101,-28,-113,-41,-113,-41],[-113,-41,-84,-29,-84,-29],[-84,-29,-93,-45,-93,-45],[-86,-44,-80,-41,-73,-40],[-71,-39,-67,-37,-65,-39],[-63,-40,-63,-45,-62,-47],[-62,-47,-36,-34,-36,-34],[-36,-34,-36,-50,-36,-50],[-36,-50,-13,-38,-13,-38]],[[2,-155],[2,-147,1,-125,3,-118],[3,-118,6,-145,6,-145],[6,-145,9,-163,9,-163],[10,-154,11,-132,14,-125],[14,-125,16,-148,16,-148],[16,-148,18,-164,18,-164],[18,-164,21,-117,21,-117],[21,-117,30,-155,30,-155],[30,-155,30,-141,30,-141],[30,-141,29,-120,29,-120],[29,-120,28,-98,28,-98],[28,-98,27,-81,27,-81],[27,-81,26,-61,26,-61],[26,-61,26,-49,26,-49],[26,-49,25,-38,25,-38],[25,-38,25,-27,25,-27],[25,-27,24,-17,24,-17],[24,-13,25,-4,23,-1],[19,6,0,5,-7,5],[-7,5,-27,3,-27,3],[-29,3,-32,2,-34,0],[-36,-2,-35,-14,-35,-17],[-35,-17,-36,-34,-36,-34],[-36,-34,-36,-46,-36,-46],[-36,-46,-37,-58,-37,-58],[-37,-58,-39,-114,-39,-114],[-39,-114,-40,-131,-40,-131],[-40,-131,-40,-140,-40,-140],[-40,-147,-42,-156,-40,-162],[-40,-162,-36,-124,-36,-124],[-36,-124,-33,-96,-33,-96],[-33,-96,-33,-135,-33,-135],[-33,-135,-32,-154,-32,-154],[-32,-154,-29,-138,-29,-138],[-29,-145,-30,-154,-27,-160],[-27,-160,-24,-133,-24,-133],[-24,-133,-21,-112,-21,-112],[-21,-112,-21,-129,-21,-129],[-21,-129,-20,-145,-20,-145],[-20,-151,-20,-164,-18,-169],[-18,-162,-16,-144,-14,-139],[-14,-145,-15,-153,-12,-158],[-12,-158,-4,-124,-4,-124],[-4,-124,0,-171,0,-171],[3,-166,2,-160,2,-155]],[[5,-142],[7,-129,4,-116,8,-103],[8,-103,10,-124,10,-124],[10,-124,12,-135,12,-135],[12,-135,15,-106,15,-106],[15,-106,17,-89,17,-89],[17,-89,22,-125,22,-125],[22,-125,26,-144,26,-144],[26,-144,32,-91,32,-91],[32,-91,38,-127,38,-127],[38,-127,41,-144,41,-144],[41,-144,39,-107,39,-107],[39,-107,39,-98,39,-98],[39,-98,38,-88,38,-88],[38,-88,37,-67,37,-67],[37,-67,36,-54,36,-54],[36,-54,35,-33,35,-33],[35,-33,34,-23,34,-23],[34,-23,33,-7,33,-7],[33,-4,33,0,31,3],[29,5,25,6,22,7],[17,8,4,9,-1,9],[-9,9,-23,9,-31,7],[-34,7,-39,6,-41,4],[-43,2,-43,-2,-44,-4],[-44,-4,-45,-27,-45,-27],[-45,-27,-48,-65,-48,-65],[-48,-65,-51,-104,-51,-104],[-51,-111,-54,-129,-52,-135],[-52,-135,-41,-97,-41,-97],[-41,-97,-41,-133,-41,-133],[-41,-139,-42,-145,-39,-150],[-39,-150,-32,-119,-32,-119],[-32,-119,-26,-92,-26,-92],[-26,-92,-22,-127,-22,-127],[-22,-127,-19,-149,-19,-149],[-19,-149,-5,-83,-5,-83],[-5,-83,4,-152,4,-152],[5,-148,5,-146,5,-142]],[[9,-126],[9,-115,8,-99,11,-89],[11,-95,12,-110,15,-115],[15,-115,20,-72,20,-72],[20,-72,31,-115,31,-115],[32,-121,33,-129,37,-134],[37,-134,34,-110,34,-110],[34,-110,33,-94,33,-94],[33,-94,40,-115,40,-115],[40,-115,43,-75,43,-75],[43,-75,50,-106,50,-106],[50,-106,54,-123,54,-123],[54,-123,50,-87,50,-87],[50,-87,43,-27,43,-27],[43,-27,41,-5,41,-5],[41,-2,40,4,38,7],[34,12,15,14,8,14],[8,14,-32,13,-32,13],[-36,13,-45,11,-49,8],[-51,6,-51,2,-51,-1],[-51,-1,-54,-23,-54,-23],[-54,-23,-62,-96,-62,-96],[-63,-103,-66,-119,-64,-125],[-64,-125,-50,-77,-50,-77],[-50,-77,-50,-91,-50,-91],[-50,-91,-49,-106,-49,-106],[-49,-106,-47,-123,-47,-123],[-47,-123,-27,-67,-27,-67],[-27,-67,-27,-88,-27,-88],[-27,-88,-26,-102,-26,-102],[-26,-102,-25,-134,-25,-134],[-25,-134,-20,-118,-20,-118],[-20,-118,-10,-85,-10,-85],[-10,-85,-4,-68,-4,-68],[-4,-68,1,-101,1,-101],[1,-101,8,-142,8,-142],[10,-138,9,-131,9,-126]],[[-27,-106],[-27,-106,-24,-73,-24,-73],[-24,-73,-22,-73,-22,-73],[-22,-79,-21,-95,-19,-100],[-19,-100,-6,-64,-6,-64],[-6,-64,2,-100,2,-100],[2,-100,6,-119,6,-119],[6,-119,10,-70,10,-70],[10,-70,20,-98,20,-98],[20,-98,25,-58,25,-58],[25,-58,32,-85,32,-85],[32,-85,40,-114,40,-114],[40,-114,41,-103,41,-103],[41,-103,42,-78,42,-78],[43,-83,45,-91,48,-95],[48,-95,50,-71,50,-71],[50,-71,55,-90,55,-90],[55,-90,61,-105,61,-105],[61,-105,58,-65,58,-65],[58,-65,63,-86,63,-86],[63,-86,68,-99,68,-99],[68,-99,62,-68,62,-68],[62,-68,53,-18,53,-18],[53,-18,50,1,50,1],[49,4,49,8,46,10],[44,12,40,13,37,14],[32,15,20,16,15,16],[15,16,-38,15,-38,15],[-43,15,-53,14,-57,11],[-60,9,-60,5,-61,2],[-61,2,-64,-17,-64,-17],[-64,-17,-76,-83,-76,-83],[-77,-89,-82,-105,-80,-110],[-80,-110,-59,-54,-59,-54],[-59,-54,-60,-75,-60,-75],[-60,-75,-61,-87,-61,-87],[-61,-87,-61,-102,-61,-102],[-61,-102,-61,-116,-61,-116],[-61,-116,-54,-82,-54,-82],[-54,-82,-52,-99,-52,-99],[-52,-99,-38,-59,-38,-59],[-38,-59,-29,-120,-29,-120],[-29,-120,-27,-106,-27,-106]],[[11,-86],[11,-86,18,-48,18,-48],[18,-48,24,-73,24,-73],[24,-73,32,-57,32,-57],[32,-57,43,-85,43,-85],[43,-85,50,-100,50,-100],[50,-100,43,-57,43,-57],[43,-57,58,-82,58,-82],[58,-82,55,-49,55,-49],[55,-49,67,-76,67,-76],[67,-76,76,-94,76,-94],[76,-94,71,-67,71,-67],[71,-67,69,-51,69,-51],[69,-51,83,-86,83,-86],[82,-80,79,-70,77,-63],[77,-63,62,-13,62,-13],[62,-13,57,4,57,4],[57,7,56,10,54,12],[51,14,45,15,42,15],[42,15,15,18,15,18],[-4,18,-22,18,-41,16],[-46,15,-61,14,-65,10],[-68,7,-71,-8,-73,-13],[-73,-13,-88,-69,-88,-69],[-89,-74,-94,-87,-93,-92],[-93,-92,-72,-53,-72,-53],[-72,-53,-70,-78,-70,-78],[-70,-78,-68,-95,-68,-95],[-68,-95,-58,-59,-58,-59],[-58,-65,-57,-75,-54,-80],[-54,-80,-41,-43,-41,-43],[-41,-43,-35,-99,-35,-99],[-35,-99,-33,-99,-33,-99],[-33,-99,-28,-63,-28,-63],[-26,-69,-23,-86,-20,-90],[-20,-83,-19,-65,-16,-60],[-16,-60,-13,-79,-13,-79],[-13,-79,-11,-79,-11,-79],[-11,-79,-4,-53,-4,-53],[-4,-53,7,-101,7,-101],[7,-101,11,-86,11,-86]],[[-39,-78],[-39,-78,-34,-51,-34,-51],[-34,-51,-29,-70,-29,-70],[-28,-74,-28,-77,-25,-79],[-25,-79,-21,-45,-21,-45],[-21,-50,-19,-64,-16,-68],[-16,-68,2,-41,2,-41],[2,-47,4,-67,6,-72],[6,-72,19,-30,19,-30],[19,-30,24,-65,24,-65],[24,-65,26,-65,26,-65],[26,-65,31,-42,31,-42],[31,-42,46,-70,46,-70],[46,-70,57,-88,57,-88],[55,-80,50,-59,51,-52],[54,-58,60,-71,65,-75],[65,-66,64,-40,66,-33],[66,-33,80,-62,80,-62],[80,-62,89,-78,89,-78],[89,-78,80,-46,80,-46],[80,-46,95,-69,95,-69],[95,-69,73,-12,73,-12],[71,-7,67,6,63,9],[59,11,42,14,37,15],[10,20,-17,20,-44,15],[-44,15,-65,11,-65,11],[-68,10,-72,9,-74,7],[-77,5,-79,-2,-80,-5],[-80,-5,-92,-39,-92,-39],[-92,-39,-100,-62,-100,-62],[-101,-66,-104,-71,-103,-75],[-103,-75,-81,-43,-81,-43],[-81,-43,-83,-72,-83,-72],[-83,-72,-83,-85,-83,-85],[-83,-85,-72,-49,-72,-49],[-72,-56,-72,-69,-70,-75],[-70,-75,-63,-58,-63,-58],[-63,-58,-62,-76,-62,-76],[-62,-76,-48,-40,-48,-40],[-48,-40,-43,-91,-43,-91],[-43,-91,-39,-78,-39,-78]]]
  },
  firefoxlaunch : {
    name : "firefoxlaunch",
    frames : 1,
    path : [[[-13,-259],[-13,-259,13,-278,13,-278],[13,-278,25,-283,25,-283],[25,-283,37,-286,37,-286],[37,-286,56,-278,56,-278],[56,-278,76,-269,76,-269],[76,-269,96,-254,96,-254],[96,-254,111,-241,111,-241],[111,-241,89,-241,89,-241],[89,-241,114,-209,114,-209],[114,-209,129,-173,129,-173],[129,-173,117,-189,117,-189],[117,-189,117,-180,117,-180],[117,-171,121,-163,124,-154],[124,-154,135,-121,135,-121],[135,-121,123,-137,123,-137],[123,-137,129,-112,129,-112],[129,-112,130,-100,130,-100],[130,-100,108,-146,108,-146],[108,-139,111,-121,109,-115],[109,-115,105,-121,105,-121],[105,-115,106,-94,104,-89],[104,-89,97,-122,97,-122],[97,-122,95,-122,95,-122],[95,-122,94,-102,94,-102],[94,-102,79,-140,79,-140],[79,-140,81,-121,81,-121],[81,-121,79,-106,79,-106],[79,-106,83,-85,83,-85],[83,-85,91,-49,91,-49],[91,-49,84,-59,84,-59],[84,-59,72,-86,72,-86],[72,-86,67,-68,67,-68],[67,-68,59,-79,59,-79],[59,-79,61,-56,61,-56],[61,-56,50,-71,50,-71],[48,-65,44,-54,40,-50],[40,-50,39,-59,39,-59],[39,-59,38,-77,38,-77],[35,-72,29,-63,25,-59],[25,-59,24,-74,24,-74],[24,-74,22,-74,22,-74],[22,-68,19,-55,16,-50],[16,-50,7,-75,7,-75],[7,-75,0,-61,0,-61],[0,-61,-5,-82,-5,-82],[-5,-82,-18,-53,-18,-53],[-18,-53,-6,-121,-6,-121],[-4,-128,-1,-143,-2,-149],[-2,-149,-10,-130,-10,-130],[-13,-123,-16,-110,-20,-105],[-20,-105,-19,-114,-19,-114],[-19,-114,-17,-141,-17,-141],[-17,-141,-29,-128,-29,-128],[-29,-128,-37,-100,-37,-100],[-37,-100,-36,-132,-36,-132],[-36,-132,-49,-130,-49,-130],[-49,-130,-40,-153,-40,-153],[-44,-146,-62,-127,-68,-120],[-72,-115,-76,-109,-82,-106],[-82,-106,-77,-130,-77,-130],[-77,-130,-89,-123,-89,-123],[-89,-123,-64,-161,-64,-161],[-64,-161,-79,-149,-79,-149],[-79,-149,-60,-192,-60,-192],[-60,-192,-45,-210,-45,-210],[-45,-210,-20,-240,-20,-240],[-20,-240,-34,-241,-34,-241],[-34,-241,-13,-259,-13,-259]],[[19,-248],[20,-246,23,-243,25,-244],[29,-246,33,-252,41,-255],[41,-255,43,-248,43,-248],[43,-248,47,-262,47,-262],[47,-262,61,-239,61,-239],[61,-239,61,-248,61,-248],[61,-248,78,-233,78,-233],[78,-233,88,-224,88,-224],[88,-224,104,-204,104,-204],[104,-204,116,-189,116,-189],[116,-189,137,-152,137,-152],[137,-152,161,-74,161,-74],[161,-74,150,-80,150,-80],[150,-80,139,-76,139,-76],[139,-76,146,-62,146,-62],[133,-66,131,-69,123,-79],[123,-79,128,-59,128,-59],[128,-59,118,-68,118,-68],[117,-63,114,-58,110,-55],[109,-68,104,-92,99,-105],[99,-105,100,-75,100,-75],[100,-75,101,-61,101,-61],[95,-64,91,-69,86,-74],[85,-68,84,-56,81,-52],[81,-52,71,-75,71,-75],[70,-69,65,-49,62,-44],[62,-44,58,-59,58,-59],[58,-59,56,-77,56,-77],[56,-77,51,-59,51,-59],[47,-62,43,-72,41,-77],[39,-72,34,-60,29,-57],[29,-57,23,-72,23,-72],[23,-72,20,-55,20,-55],[20,-55,19,-44,19,-44],[19,-44,2,-71,2,-71],[2,-71,-2,-56,-2,-56],[-2,-56,-8,-73,-8,-73],[-10,-73,-13,-72,-15,-71],[-19,-68,-23,-53,-25,-48],[-25,-48,-31,-69,-31,-69],[-31,-69,-29,-94,-29,-94],[-30,-87,-37,-65,-41,-60],[-41,-60,-42,-76,-42,-76],[-42,-76,-45,-84,-45,-84],[-45,-84,-47,-84,-47,-84],[-47,-84,-57,-60,-57,-60],[-57,-60,-57,-72,-57,-72],[-57,-72,-56,-84,-56,-84],[-73,-72,-69,-68,-79,-59],[-79,-59,-79,-75,-79,-75],[-79,-75,-90,-69,-90,-69],[-90,-69,-77,-95,-77,-95],[-77,-95,-55,-148,-55,-148],[-55,-148,-43,-178,-43,-178],[-43,-178,-32,-199,-32,-199],[-32,-199,-60,-170,-60,-170],[-60,-170,-85,-139,-85,-139],[-85,-139,-75,-167,-75,-167],[-75,-167,-106,-131,-106,-131],[-106,-131,-89,-167,-89,-167],[-94,-162,-103,-153,-109,-150],[-109,-150,-77,-189,-77,-189],[-77,-189,-46,-226,-46,-226],[-46,-226,-31,-238,-31,-238],[-31,-238,-12,-251,-12,-251],[-12,-251,-19,-239,-19,-239],[-19,-239,13,-261,13,-261],[13,-261,9,-246,9,-246],[9,-246,22,-262,22,-262],[24,-256,19,-252,19,-248]],[[-114,-217],[-114,-217,-93,-228,-93,-228],[-93,-228,-51,-249,-51,-249],[-51,-249,-12,-270,-12,-270],[-12,-270,5,-275,5,-275],[5,-275,38,-284,38,-284],[42,-284,52,-280,56,-279],[56,-279,89,-268,89,-268],[89,-268,117,-259,117,-259],[122,-257,128,-257,132,-253],[132,-253,124,-251,124,-251],[124,-251,153,-235,153,-235],[153,-235,204,-206,204,-206],[212,-202,235,-190,240,-185],[240,-185,207,-191,207,-191],[207,-191,228,-152,228,-152],[228,-152,208,-162,208,-162],[208,-162,189,-172,189,-172],[189,-172,161,-186,161,-186],[161,-186,171,-170,171,-170],[171,-170,164,-163,164,-163],[164,-163,166,-154,166,-154],[166,-154,172,-134,172,-134],[172,-134,159,-151,159,-151],[159,-151,139,-178,139,-178],[140,-172,144,-157,142,-152],[138,-159,129,-172,124,-177],[124,-172,123,-167,120,-163],[120,-163,115,-177,115,-177],[113,-174,106,-166,106,-163],[106,-160,115,-147,117,-143],[117,-143,96,-154,96,-154],[96,-154,111,-101,111,-101],[112,-96,117,-84,115,-79],[115,-79,102,-108,102,-108],[102,-108,102,-86,102,-86],[102,-86,101,-73,101,-73],[101,-73,85,-122,85,-122],[85,-122,84,-111,84,-111],[84,-111,81,-80,81,-80],[81,-75,81,-65,78,-61],[73,-68,63,-82,57,-87],[57,-87,54,-63,54,-63],[54,-63,51,-48,51,-48],[51,-48,39,-80,39,-80],[39,-80,29,-53,29,-53],[25,-68,28,-75,14,-85],[14,-85,3,-53,3,-53],[3,-53,6,-87,6,-87],[6,-87,10,-143,10,-143],[10,-143,13,-186,13,-186],[12,-181,6,-166,2,-163],[2,-163,-2,-174,-2,-174],[-2,-174,-30,-67,-30,-67],[-30,-67,-38,-76,-38,-76],[-41,-71,-49,-62,-54,-58],[-54,-58,-47,-81,-47,-81],[-47,-81,-30,-135,-30,-135],[-30,-135,-21,-164,-21,-164],[-21,-164,-27,-180,-27,-180],[-30,-174,-42,-159,-47,-155],[-47,-166,-49,-170,-42,-179],[-54,-171,-53,-169,-58,-157],[-60,-152,-62,-144,-66,-141],[-66,-141,-61,-170,-61,-170],[-61,-170,-72,-169,-72,-169],[-72,-169,-62,-187,-62,-187],[-62,-187,-94,-167,-94,-167],[-94,-167,-84,-191,-84,-191],[-84,-191,-93,-188,-93,-188],[-90,-194,-76,-205,-70,-209],[-70,-209,-16,-255,-16,-255],[-16,-255,-48,-240,-48,-240],[-48,-240,-92,-220,-92,-220],[-101,-215,-106,-214,-116,-211],[-120,-210,-123,-209,-127,-210],[-127,-210,-114,-217,-114,-217]],[[18,-261],[18,-261,31,-266,31,-266],[28,-257,26,-260,29,-252],[33,-254,43,-260,45,-264],[46,-266,46,-268,46,-270],[51,-267,54,-261,58,-257],[58,-257,53,-270,53,-270],[53,-270,70,-259,70,-259],[70,-259,93,-242,93,-242],[93,-242,87,-257,87,-257],[87,-257,139,-235,139,-235],[139,-235,103,-269,103,-269],[103,-269,136,-253,136,-253],[136,-253,175,-233,175,-233],[175,-233,201,-206,201,-206],[201,-206,238,-166,238,-166],[238,-166,213,-183,213,-183],[213,-183,190,-200,190,-200],[190,-200,212,-168,212,-168],[212,-168,221,-153,221,-153],[221,-153,179,-173,179,-173],[179,-173,195,-145,195,-145],[195,-145,200,-123,200,-123],[200,-123,181,-135,181,-135],[181,-135,143,-160,143,-160],[143,-160,157,-117,157,-117],[157,-117,142,-129,142,-129],[142,-129,114,-153,114,-153],[114,-153,122,-108,122,-108],[122,-108,130,-67,130,-67],[130,-67,134,-47,134,-47],[128,-50,123,-59,120,-64],[120,-64,92,-101,92,-101],[92,-101,82,-51,82,-51],[78,-54,76,-59,74,-64],[71,-71,62,-89,60,-96],[60,-96,43,-80,43,-80],[43,-80,24,-102,24,-102],[24,-102,17,-68,17,-68],[17,-68,15,-68,15,-68],[15,-68,8,-103,8,-103],[6,-97,-4,-75,-8,-70],[-8,-70,-12,-118,-12,-118],[-12,-118,-23,-92,-23,-92],[-23,-92,-33,-72,-33,-72],[-33,-72,-32,-116,-32,-116],[-32,-116,-33,-136,-33,-136],[-35,-131,-46,-110,-49,-106],[-49,-106,-36,-165,-36,-165],[-36,-165,-27,-208,-27,-208],[-27,-208,-22,-227,-22,-227],[-22,-227,-8,-252,-8,-252],[-8,-252,-38,-249,-38,-249],[-38,-249,-50,-247,-50,-247],[-50,-247,-72,-230,-72,-230],[-72,-230,-124,-188,-124,-188],[-124,-188,-105,-214,-105,-214],[-105,-214,-87,-239,-87,-239],[-87,-239,-62,-253,-62,-253],[-62,-253,-34,-269,-34,-269],[-34,-269,8,-275,8,-275],[8,-275,4,-265,4,-265],[4,-265,25,-277,25,-277],[26,-272,21,-265,18,-261]]],
  },
  firefoxtail : {
    name : "firefoxtail",
    frames : 15
  },
  laser : {
    name : "laser",
    frames : 8
  },
  illusion : {
    name : "illusion",
    frames : 4,
    path : [[-43,-105],[-45,-103,-46,-99,-49,-99],[-51,-99,-53,-101,-53,-103],[-53,-103,-52,-108,-52,-108],[-52,-113,-54,-115,-50,-122],[-47,-128,-39,-134,-33,-135],[-30,-136,-28,-134,-25,-135],[-20,-137,-19,-141,-15,-143],[-5,-145,6,-133,8,-125],[12,-124,12,-124,13,-121],[19,-125,26,-130,33,-132],[40,-133,46,-131,51,-131],[51,-131,59,-132,59,-132],[59,-132,71,-132,71,-132],[71,-132,68,-118,68,-118],[68,-114,71,-112,70,-109],[70,-107,68,-105,67,-102],[66,-99,66,-96,66,-93],[66,-93,64,-85,64,-85],[63,-81,66,-75,67,-71],[68,-69,70,-66,69,-63],[67,-60,62,-61,59,-62],[46,-64,45,-68,37,-71],[35,-72,31,-73,29,-70],[27,-68,28,-65,29,-63],[30,-57,30,-57,29,-51],[34,-49,35,-43,34,-38],[34,-38,44,-32,44,-32],[45,-39,49,-43,56,-46],[56,-46,55,-39,55,-39],[58,-41,69,-49,71,-49],[74,-49,74,-45,74,-43],[74,-41,72,-38,71,-36],[69,-31,69,-26,66,-22],[62,-19,48,-13,43,-13],[40,-14,38,-16,36,-16],[33,-16,31,-13,27,-14],[24,-15,17,-20,15,-23],[15,-23,8,-41,8,-41],[7,-43,7,-43,7,-45],[-1,-44,-2,-39,-5,-32],[-6,-30,-9,-26,-9,-24],[-9,-19,-3,-17,0,-15],[6,-11,17,-1,14,7],[12,12,8,11,4,9],[-4,6,-13,-2,-20,-5],[-23,-6,-32,-8,-33,-12],[-34,-18,-27,-23,-25,-27],[-22,-31,-23,-37,-24,-41],[-30,-35,-42,-22,-51,-21],[-55,-21,-59,-23,-62,-25],[-69,-22,-83,-32,-91,-32],[-101,-32,-102,-19,-108,-12],[-110,-10,-113,-6,-117,-7],[-123,-8,-122,-16,-121,-20],[-119,-27,-115,-33,-112,-40],[-110,-45,-106,-53,-102,-57],[-99,-59,-96,-58,-93,-55],[-90,-52,-89,-49,-86,-48],[-82,-46,-75,-49,-71,-50],[-66,-51,-64,-50,-60,-48],[-60,-48,-59,-54,-59,-54],[-59,-54,-54,-53,-54,-53],[-54,-53,-54,-60,-54,-60],[-54,-60,-45,-70,-45,-70],[-53,-67,-62,-68,-70,-68],[-92,-68,-118,-68,-132,-88],[-132,-88,-112,-97,-112,-97],[-112,-97,-105,-99,-105,-99],[-77,-104,-62,-100,-38,-85],[-38,-90,-33,-97,-28,-97],[-26,-98,-25,-97,-23,-96],[-23,-108,-19,-105,-9,-108],[-9,-108,-9,-110,-9,-110],[-13,-112,-19,-121,-23,-120],[-30,-120,-26,-109,-26,-107],[-27,-104,-30,-104,-33,-109],[-33,-109,-35,-113,-35,-113],[-38,-111,-41,-108,-43,-105]]
  },
  sing : {
    name : "sing",
    frames : 31,
    path : [[26.00,4.64],
      [26.00,4.64,31.91,6.00,34.91,8.36],
      [37.91,10.73,41.55,14.82,45.09,14.18],
      [45.18,15.36,32.64,16.18,27.18,10.55],
      [27.09,10.64,27.18,28.27,27.18,28.27],
      [27.18,28.27,34.18,38.64,19.64,43.36],
      [5.09,48.09,3.91,27.55,25.91,27.82],
      [25.91,27.82,26.00,4.64,26.00,4.64]]
  },
  sing2 : {
    name : "sing2",
    frames : 31 // reuses path from sing
  },
  sing3 : {
    name : "sing3",
    frames : 31 // reuses path from sing
  }
};

vfx.wallBounce.path = vfx.groundBounce.path;
vfx.wallBounce.colour = vfx.groundBounce.colour;
vfx.wallBounce.frames = vfx.groundBounce.frames;
vfx.ceilingBounce.path = vfx.groundBounce.path;
vfx.ceilingBounce.colour = vfx.groundBounce.colour;
vfx.ceilingBounce.frames = vfx.groundBounce.frames;

export let transparency = true;


export function setTransparency(val){
  transparency = val;
}


export const dVfx = {
  general: function(j, ang) {
    var col = makeColour(vfxQueue[j][0].colour[0], vfxQueue[j][0].colour[1], vfxQueue[j][0].colour[2], 0.8 * ((
      vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.rotate(ang);
    drawArrayPath(fg2, col, vfxQueue[j][3], 0, 0, vfxQueue[j][0].path[vfxQueue[j][1] - 1], 0.2 * (stage.scale / 4.5),
      0.2 * (stage.scale / 4.5));
    fg2.restore();
  },
  swing: function(j, draw) {
    draw = draw || true;
    var p = vfxQueue[j][4].pNum;
    if (vfxQueue[j][4].posNow == undefined || vfxQueue[j][4].posNow == null) {
      vfxQueue[j][4].posNow = new Vec2D(player[p].phys.pos.x, player[p].phys.pos.y);
      vfxQueue[j][4].posPrev = new Vec2D(player[p].phys.posPrev.x, player[p].phys.posPrev.y);
    }
    var frame = vfxQueue[j][4].frame;
    var swingType = vfxQueue[j][4].swingType;
    var swordPrev = swordSwings[swingType][frame];
    var swordNow = swordSwings[swingType][frame + 1];
    var scale = player[p].charAttributes.charScale;
    var pos = vfxQueue[j][4].posNow;
    var posPrev = vfxQueue[j][4].posPrev;
    var sc = stage.scale;
    var soX = stage.offset[0];
    var soY = stage.offset[1];
    if (draw) {
      fg2.fillStyle = makeColour(46, 217, 255, (0.7 - (0.7 / 5 * vfxQueue[j][1])));
      fg2.beginPath();
      fg2.moveTo(((scale * (swordNow[0][0] / 4.5 * player[p].phys.face) + pos.x) * sc + soX), ((scale * (swordNow[0]
        [1] / -4.5) + pos.y) * -sc + soY));
      fg2.lineTo(((scale * (swordNow[1][0] / 4.5 * player[p].phys.face) + pos.x) * sc + soX), ((scale * (swordNow[1]
        [1] / -4.5) + pos.y) * -sc + soY));
      fg2.lineTo(((scale * (swordPrev[1][0] / 4.5 * player[p].phys.face) + posPrev.x) * sc + soX), ((scale * (
        swordPrev[1][1] / -4.5) + posPrev.y) * -sc + soY));
      fg2.lineTo(((scale * (swordPrev[0][0] / 4.5 * player[p].phys.face) + posPrev.x) * sc + soX), ((scale * (
        swordPrev[0][1] / -4.5) + posPrev.y) * -sc + soY));
      fg2.closePath();
      fg2.fill();
    }
  },
  impactLand: function(j) {
    dVfx.general(j, 0);
  },
  circleDust: function(j) {
    for (var n = 0; n < vfxQueue[j][0].circles.length; n++) {
      var x = ((vfxQueue[j][2].x + (vfxQueue[j][0].circles[n] * (1 + (vfxQueue[j][1] / vfxQueue[j][0].frames)))) *
        stage.scale) + stage.offset[0];
      var y = ((vfxQueue[j][2].y + (4 * (0 + (vfxQueue[j][1] / vfxQueue[j][0].frames)))) * -stage.scale) + stage.offset[
        1];
      fg2.fillStyle = makeColour(255, 255, 255, 0.7 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
      fg2.beginPath();
      fg2.arc(x, y, 12 * (stage.scale / 4.5), twoPi, 0);
      fg2.fill();
    }
  },
  flyingDust: function(j) {
    fg2.fillStyle = makeColour(255, 255, 255, 0.7 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      12 * (stage.scale / 4.5), twoPi, 0);
    fg2.fill();
  },
  dashDust: function(j) {
    dVfx.general(j, 0);
  },
  doubleJumpRings: function(j) {
    fg2.strokeStyle = makeColour(99, 100, 255, 0.7 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    for (var n = 0; n < vfxQueue[j][0].rings.length; n++) {
      fg2.save();
      fg2.scale(1, 0.25);
      fg2.beginPath();
      fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], ((vfxQueue[j][2].y * -stage.scale) + stage.offset[
        1]) * 4, vfxQueue[j][1] * (40 / 8) + n * stage.scale, twoPi, 0);
      fg2.lineWidth = 3;
      fg2.stroke();
      fg2.closePath();
      fg2.restore();
    }
  },
  blastzoneExplosion: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.rotate(vfxQueue[j][3] * Math.PI / 180);
    var col = makeColour(149, 255, 163, 0.8 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    drawArrayPath(fg2, col, 1, 0, -200 - (20 + (100 * (vfxQueue[j][1] / 20))), vfxQueue[j][0].path1, 1.3, 1.3);
    if (vfxQueue[j][1] >= vfxQueue[j][0].svg2Active[0] && vfxQueue[j][1] <= vfxQueue[j][0].svg2Active[1]) {
      col = "rgb(166,223,255)";
      drawArrayPath(fg2, col, 1, 0, -90, vfxQueue[j][0].path2, (vfxQueue[j][0].svg2Scale[vfxQueue[j][1] - 1][0]) *
        1.5, (vfxQueue[j][0].svg2Scale[vfxQueue[j][1] - 1][1]) * 1.5);
    }
    if (vfxQueue[j][1] >= vfxQueue[j][0].svg3Active[0] && vfxQueue[j][1] <= vfxQueue[j][0].svg3Active[1]) {
      col = "rgb(255,161,161)";
      drawArrayPath(fg2, col, 1, 0, -90, vfxQueue[j][0].path2, (vfxQueue[j][0].svg3Scale[vfxQueue[j][1] - vfxQueue[
        j][0].svg3Active[0]][0]) * 1.5, (vfxQueue[j][0].svg3Scale[vfxQueue[j][1] - vfxQueue[j][0].svg3Active[0]]
        [1]) * 1.5);
    }
    col = makeColour(242, 255, 93, 0.8 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    drawArrayPath(fg2, col, 1, 0, 0, vfxQueue[j][0].path4, 1.5, 1.5);
    if (vfxQueue[j][1] < 10) {
      fg2.fillStyle = makeColour(255, 255, 255, 0.8 * ((10 - vfxQueue[j][1]) / 10));
      fg2.scale(0.5, 1);
      fg2.beginPath();
      fg2.arc(0, 0, (450 * (vfxQueue[j][1] / 10) + 170), twoPi, 0);
      fg2.fill();
      fg2.closePath();
    }
    fg2.restore();
  },
  cliffcatchspark: function(j) {
    fg2.save();
    fg2.strokeStyle = "rgb(47, 194, 214)";
    fg2.lineWidth = 10 - (vfxQueue[j][1] / 3);
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      (12 * ((vfxQueue[j][1]) / vfxQueue[j][0].frames) + 3) * (stage.scale / 4.5), twoPi, 0);
    fg2.stroke();
    fg2.restore();
  },
  hitFlair: function(j) {
    var x = (vfxQueue[j][2].x * stage.scale) + stage.offset[0];
    var y = (vfxQueue[j][2].y * -stage.scale) + stage.offset[1];
    fg2.strokeStyle = makeColour(146, 217, 164, 0.7 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.lineWidth = 5;
    fg2.beginPath();
    fg2.arc(x, y, 15, twoPi, 0);
    fg2.closePath();
    fg2.stroke();
    fg2.lineWidth = 1;
    fg2.fillStyle = makeColour(146, 217, 164, 0.8 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.beginPath();
    fg2.moveTo(x + 3, y - 3);
    fg2.lineTo(x + 30, y);
    fg2.lineTo(x + 3, y + 3);
    fg2.lineTo(x, y + 30);
    fg2.lineTo(x - 3, y + 3);
    fg2.lineTo(x - 30, y);
    fg2.lineTo(x - 3, y - 3);
    fg2.lineTo(x, y - 30);
    fg2.closePath();
    fg2.fill();
  },
  hitSparks: function(j) {
    var col = makeColour(143, 128, 233, 0.7);;
    drawArrayPath(fg2, col, vfxQueue[j][3], (vfxQueue[j][2].x * stage.scale) + stage.offset[0] + 10, (vfxQueue[j][2]
      .y * -stage.scale) + stage.offset[1], vfxQueue[j][0].path1, 0.2 * (stage.scale / 4.5), 0.2 * (stage.scale /
      4.5));
    drawArrayPath(fg2, col, vfxQueue[j][3], (vfxQueue[j][2].x * stage.scale) + stage.offset[0] + 10, (vfxQueue[j][2]
      .y * -stage.scale) + stage.offset[1], vfxQueue[j][0].path2, 0.2 * (stage.scale / 4.5), 0.2 * (stage.scale /
      4.5));
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.rotate(Math.PI);
    drawArrayPath(fg2, col, vfxQueue[j][3], 0, 0, vfxQueue[j][0].path1, 0.2 * (stage.scale / 4.5), 0.2 * (stage.scale /
      4.5));
    drawArrayPath(fg2, col, vfxQueue[j][3], 0, 0, vfxQueue[j][0].path2, 0.2 * (stage.scale / 4.5), 0.2 * (stage.scale /
      4.5));
    fg2.restore();
  },
  hitCurve: function(j) {

  },
  groundBounce: function(j) {
    dVfx.general(j, 0);
  },
  wallBounce: function(j) {
    if (vfxQueue[j][4]) {
      dVfx.general(j, Math.PI / 2);
    } else {
      dVfx.general(j, Math.PI * 1.5);
    }
  },
  ceilingBounce: function(j) {
    dVfx.general(j, Math.PI);
  },
  furaFura: function(j) {
    fg2.fillStyle = makeColour(255, 254, 108, 0.9 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      5 * (stage.scale / 4.5), twoPi, 0);
    fg2.fill();
  },
  breakShield: function(j) {
    fg2.fillStyle = makeColour(73, 255, 244, 0.9 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + 430, (10 + (3 *
      vfxQueue[j][1])) * (stage.scale / 4.5), twoPi, 0);
    fg2.fill();
    fg2.fillStyle = "#cd8eff";
    for (var k = 0; k < 3; k++) {
      fg2.beginPath();
      fg2.arc((vfxQueue[j][2].x * stage.scale) + 550 + Math.random() * 100, (vfxQueue[j][2].y * -stage.scale) + 380 +
        Math.random() * 100, 8 * (stage.scale / 4.5), twoPi, 0);
      fg2.fill();
    }
  },
  powershieldreflect: function(j) {
    var frame = vfxQueue[j][1];
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.lineWidth = 4;
    fg2.strokeStyle = "rgba(255, 127, 112," + (0.8 - 0.15 * frame) + ")";
    fg2.beginPath();
    fg2.arc(0, 0, (13 - frame * 1) * stage.scale, 0, twoPi);
    fg2.closePath();
    fg2.stroke();
    var grd = fg2.createRadialGradient(0, 0, 5, 0, 0, (25 - frame * 2) * stage.scale);
    grd.addColorStop(0, "rgba(255,255,255," + (1 - 0.15 * frame) + ")");
    grd.addColorStop(1, "rgba(97, 255, 250, 0)");
    if (frame < 3) {
      fg2.fillStyle = grd;
      fg2.beginPath();
      fg2.arc(0, 0, (25 - frame * 2) * stage.scale, 0, twoPi);
      fg2.closePath();
      fg2.fill();
    }
    //fg2.strokeStyle = "rgb(112, 212, 255)";
    fg2.strokeStyle = grd;
    fg2.beginPath();
    fg2.arc(0, 0, (10 - frame * 1) * stage.scale, 0, twoPi);
    fg2.closePath();
    fg2.stroke();
    for (var i = 0; i < 14; i++) {
      fg2.rotate(Math.PI / 7 + (-0.3 + Math.random() * 0.6));
      fg2.beginPath();
      fg2.moveTo(0, ((15 + Math.random() * 10) - frame * 1.5) * stage.scale);
      fg2.lineTo(0, ((-15 - Math.random() * 10) + frame * 1.5) * stage.scale);
      fg2.closePath();
      fg2.stroke();
    }
    fg2.restore();
  },
  powershield: function(j) {
    if (vfxQueue[j][1] % 2) {
      fg2.save();
      fg2.fillStyle = makeColour(255, 255, 255, 0.3);
      fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
        1]);
      var seed = (Math.random() + 1.5) * (stage.scale / 4.5);
      fg2.scale(seed, seed);
      for (var i = 0; i < 6; i++) {
        fg2.rotate(Math.PI / 3);
        fg2.beginPath();
        fg2.moveTo(0, -15);
        fg2.lineTo(6, -23);
        fg2.lineTo(0, -40);
        fg2.lineTo(-6, -23);
        fg2.closePath();
        fg2.fill();
      }
      fg2.restore();
    }
  },
  targetDestroy: function(j) {
    fg2.save();
    var col = makeColour(255, 255, 255, 0.8);
    fg2.fillStyle = col;
    fg2.strokeStyle = col;
    fg2.lineWidth = 3;
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.beginPath();
    fg2.arc(0, 0, vfxQueue[j][1] * 2, 0, twoPi);
    fg2.closePath;
    fg2.stroke();
    fg2.scale((stage.scale / 4.5), (stage.scale / 4.5));
    for (var i = 0; i < 6; i++) {
      fg2.rotate(Math.PI / 3);
      fg2.beginPath();
      fg2.moveTo(0, -14 - vfxQueue[j][1] * 2);
      fg2.lineTo(6, -22 - vfxQueue[j][1] * 2);
      fg2.lineTo(0, -40 - vfxQueue[j][1] * 2);
      fg2.lineTo(-6, -22 - vfxQueue[j][1] * 2);
      fg2.closePath();
      fg2.fill();
    }
    fg2.restore();
  },
  shieldup: function(j) {
    fg2.strokeStyle = makeColour(255, 255, 255, 0.8 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames));
    fg2.lineWidth = 10;
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      vfxQueue[j][4] * stage.scale + 10 + (5 * (vfxQueue[j][1] - 1)), twoPi, 0);
    fg2.stroke();
    fg2.lineWidth = 5;
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      vfxQueue[j][4] * stage.scale + (5 * (vfxQueue[j][1] - 1)), twoPi, 0);
    fg2.stroke();
    fg2.lineWidth = 1;
  },
  tech: function(j) {
    fg2.save();
    fg2.strokeStyle = makeColour(251, 246, 119, (0.3 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames) +
      0.7));
    fg2.fillStyle = makeColour(255, 116, 92, (0.3 * ((vfxQueue[j][0].frames - vfxQueue[j][1]) / vfxQueue[j][0].frames) +
      0.7));
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.lineWidth = 3;
    fg2.scale(Math.min(0.2 * vfxQueue[j][1], 1), Math.min(0.2 * vfxQueue[j][1], 1));
    fg2.rotate(vfxQueue[j][1] * Math.PI / 8);
    for (var i = 0; i < 4; i++) {
      fg2.scale(0.7 + Math.random() * 0.6, 0.7 + Math.random() * 0.6);
      fg2.rotate(i * Math.PI / 2);
      fg2.beginPath();
      fg2.arc(0, 0, 10 * (stage.scale / 4.5), 1.35 * Math.PI, 1.65 * Math.PI);
      fg2.closePath();
      fg2.stroke();
      fg2.beginPath();
      fg2.arc(0, 0, 15 * (stage.scale / 4.5), 1.35 * Math.PI, 1.65 * Math.PI);
      fg2.closePath();
      fg2.stroke();
      fg2.beginPath();
      fg2.arc(0, 0, 20 * (stage.scale / 4.5), 1.35 * Math.PI, 1.65 * Math.PI);
      fg2.closePath();
      fg2.stroke();
      fg2.beginPath();
      fg2.arc(0, 0, 23 * (stage.scale / 4.5), 1.35 * Math.PI, 1.65 * Math.PI);
      fg2.closePath();
      fg2.fill();
    }
    fg2.restore();
  },
  start: function(j) {
    // hack method to ensure sounds are played in 30fps mode
    // index 3 and 5 are unoccupied so i've made them say if the sound has played
    if (vfxQueue[j][3] == undefined) {
      sounds.ready.play();
      vfxQueue[j][3] = true;
    }
    if (vfxQueue[j][1] >= 90) {
      if (vfxQueue[j][5] == undefined) {
        sounds.go.play();
        vfxQueue[j][5] = true;
      }
    }
    if (vfxQueue[j][1] < 90) {
      var textGrad = fg2.createLinearGradient(0, 200, 0, 500);
      textGrad.addColorStop(0, "rgb(255, 51, 51)");
      textGrad.addColorStop(0.6, "rgb(255, 51, 51)");
      textGrad.addColorStop(1, "rgb(121, 0, 0)");
      fg2.save();
      fg2.fillStyle = textGrad;
      fg2.textAlign = "start";
      fg2.lineWidth = 20;
      fg2.strokeStyle = "black";
      fg2.font = "italic 900 200px Arial";
      fg2.strokeText("Ready", 240, 420);
      fg2.lineWidth = 10;
      fg2.strokeStyle = "white";
      fg2.strokeText("Ready", 240, 420);
      fg2.fillText("Ready", 240, 420);
      fg2.fillStyle = "rgb(" + Math.round(vfxQueue[j][1] * 2.6) + "," + Math.round(140 - (vfxQueue[j][1] * 1.5)) +
        "," + Math.round(255 - (vfxQueue[j][1] * 2.6)) + ")";
      fg2.font = "italic 700 70px Arial";
      var milli = ((startTimer * 2) % 1).toFixed(2);
      fg2.strokeStyle = "black";
      fg2.strokeText(Math.floor(startTimer * 2) + " " + milli[2] + milli[3], 900, 500);
      fg2.fillText(Math.floor(startTimer * 2) + " " + milli[2] + milli[3], 900, 500);
      fg2.fillStyle = makeColour(255, 0, 0, 0.2);
      fg2.fillRect(240, 450, 520, 15);
      var textGrad = fg2.createLinearGradient(240 + (500 * (vfxQueue[j][1] / 90)), 450, 760 + (500 * (vfxQueue[j][1] /
        90)), 465);
      textGrad.addColorStop(0, "#ff0000");
      textGrad.addColorStop(0.16, "#ff00ff");
      textGrad.addColorStop(0.33, "#0000ff");
      textGrad.addColorStop(0.49, "#00ffff");
      textGrad.addColorStop(0.66, "#00ff00");
      textGrad.addColorStop(0.83, "#ffff00");
      textGrad.addColorStop(1, "#ff0000");
      fg2.fillStyle = textGrad;
      fg2.fillRect(240 + (500 * (vfxQueue[j][1] / 90)), 450, 520 - (500 * (vfxQueue[j][1] / 90)), 15);
      fg2.restore();
    } else {
      var textGrad = fg2.createLinearGradient(0, 200, 0, 480);
      textGrad.addColorStop(0, "black");
      textGrad.addColorStop(0.6, "black");
      textGrad.addColorStop(1, "rgb(221, 145, 57)");
      fg2.save();
      fg2.fillStyle = textGrad;
      fg2.textAlign = "start";
      fg2.lineWidth = 40;
      fg2.strokeStyle = "black";
      fg2.font = "900 400px Arial";
      fg2.strokeText("Go!", 240, 470);
      fg2.lineWidth = 20;
      fg2.strokeStyle = "white";
      fg2.strokeText("Go!", 240, 470);
      fg2.fillText("Go!", 240, 470);
      fg2.restore();
    }
  },
  entrance: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    var ellipseOffset = 0;
    var anglePos = vfxQueue[j][1] * Math.PI / 32;
    for (var i = 0; i < 8; i++) {
      var seed = Math.random() - 0.5;
      ellipseOffset = new Vec2D(35 * Math.cos(anglePos), 35 * Math.sin(anglePos) * 0.4);
      var pillarGrad = fg2.createLinearGradient(0, 0, 0, -vfxQueue[j][1] * 2 - seed * 60);
      pillarGrad.addColorStop(0, makeColour(255, 255, 255, 0.3));
      pillarGrad.addColorStop(0.5, makeColour(255, 255, 255, 0.3));
      pillarGrad.addColorStop(1, makeColour(255, 255, 255, 0));
      fg2.fillStyle = pillarGrad;
      fg2.fillRect(ellipseOffset.x, ellipseOffset.y - (vfxQueue[j][1] * 2 + seed * 60), 10 * (stage.scale / 4.5), (
        vfxQueue[j][1] * 2 + seed * 60) * (stage.scale / 4.5));
      anglePos += Math.PI / 4;
    }
    fg2.fillStyle = makeColour(163, 255, 203, 0.3)
    fg2.fillRect(-35, -(vfxQueue[j][1] % 15) * 5, 80 * (stage.scale / 4.5), 15 * (stage.scale / 4.5));
    fg2.restore();
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.strokeStyle = makeColour(255, 149, 149, 0.8);
    fg2.lineWidth = 8;
    fg2.scale(0.8 + (Math.random() * 0.3), 0.2 + (0.2 * Math.random()));
    fg2.beginPath();
    fg2.arc(5, -vfxQueue[j][1] * 3, (35 + (vfxQueue[j][1] % 2) * 10) * (stage.scale / 4.5), 0, twoPi);
    fg2.closePath();
    fg2.stroke();
    fg2.restore();
  },
  clank: function(j) {
    fg2.save();
    fg2.strokeStyle = "rgb(47, 214, 114)";
    fg2.lineWidth = 10 - (vfxQueue[j][1] / 3);
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      (12 * ((vfxQueue[j][1]) / vfxQueue[j][0].frames) + 3) * (stage.scale / 4.5), twoPi, 0);
    fg2.stroke();
    fg2.restore();
  },
  normalhit: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    switch (vfxQueue[j][1]) {
      case 1:
        fg2.fillStyle = makeColour(255, 188, 14, 0.62);
        fg2.beginPath();
        fg2.arc(0, 0, 20, 0, twoPi);
        fg2.closePath();
        fg2.fill();
        fg2.beginPath();
        fg2.moveTo(0, 30);
        fg2.lineTo(5, 5);
        fg2.lineTo(30, 0);
        fg2.lineTo(5, -5);
        fg2.lineTo(0, -30);
        fg2.lineTo(-5, -5);
        fg2.lineTo(-30, 0);
        fg2.lineTo(-5, 5);
        fg2.closePath();
        fg2.fill();
        break;
      case 2:
        drawArrayPath(fg2, "rgb(255,61,61)", vfxQueue[j][3], 0, 0, vfx.normalhit.path1, 0.2 * (stage.scale / 4.5),
          0.2 * (stage.scale / 4.5));
        break;
      case 3:
        drawArrayPath(fg2, "rgb(150, 208, 255)", vfxQueue[j][3], 0, 0, vfx.normalhit.path2, 0.2 * (stage.scale /
          4.5), 0.2 * (stage.scale / 4.5));
        break;
      case 4:
      case 5:
      case 6:
      case 7:
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, makeColour(120, 255, 99, 4 / vfxQueue[j][1]), vfxQueue[j][3], 0, 0, vfx.normalhit.path3[
            n], 0.2 * (vfxQueue[j][1] / 7) * (stage.scale / 4.5), 0.2 * (vfxQueue[j][1] / 7) * (stage.scale /
            4.5));
        }
        break;
      default:
        break;
    }
    fg2.restore();
  },
  firehit: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    switch (vfxQueue[j][1]) {
      case 1:
      case 2:
        fg2.fillStyle = makeColour(255, 255, 255, 0.62);
        fg2.beginPath();
        fg2.arc(0, 0, 20, 0, twoPi);
        fg2.closePath();
        fg2.fill();
        fg2.beginPath();
        fg2.moveTo(0, 30);
        fg2.lineTo(5, 5);
        fg2.lineTo(30, 0);
        fg2.lineTo(5, -5);
        fg2.lineTo(0, -30);
        fg2.lineTo(-5, -5);
        fg2.lineTo(-30, 0);
        fg2.lineTo(-5, 5);
        fg2.closePath();
        fg2.fill();
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, makeColour(255, 164, 56, 0.8), vfxQueue[j][3], 0, 0, vfx.normalhit.path3[n], 0.15 * (
            stage.scale / 4.5), 0.15 * (stage.scale / 4.5));
        }
        break;
      case 3:
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, makeColour(255, 164, 56, 0.8), vfxQueue[j][3], 0, 0, vfx.normalhit.path3[n], 0.2 * (
            vfxQueue[j][1] / 7) * (stage.scale / 4.5), 0.2 * (vfxQueue[j][1] / 7) * (stage.scale / 4.5));
        }
        break;
      case 4:
      case 5:
      case 6:
      case 7:
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, makeColour(255, 227, 79, 4 / vfxQueue[j][1]), vfxQueue[j][3], 0, 0, vfx.normalhit.path3[
            n], 0.1 * (vfxQueue[j][1] / 7) * (stage.scale / 4.5), 0.1 * (vfxQueue[j][1] / 7) * (stage.scale /
            4.5));
        }
        break;
      default:
        break;
    }
    drawVfx("fireburst", new Vec2D(-10 + 20 * Math.random() + vfxQueue[j][2].x, -10 + 20 * Math.random() + vfxQueue[
      j][2].y), 8);
    fg2.restore();
  },
  fireburst: function(j) {
    fg2.strokeStyle = makeColour(255, 227, 79, 1 - (vfxQueue[j][1] / 5));
    fg2.lineWidth = 1;
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1],
      vfxQueue[j][3] * (vfxQueue[j][1] / 5), 0, twoPi);
    fg2.closePath();
    fg2.stroke();
  },
  burning: function(j) {
    if (vfxQueue[j][1] == 1) {
      drawArrayPath(fg2, "rgb(253,255,161)", vfxQueue[j][3], (vfxQueue[j][2].x * stage.scale) + stage.offset[0], ((
          vfxQueue[j][2].y + 7) * -stage.scale) + stage.offset[1], vfx.normalhit.path2, 0.2 * (stage.scale / 4.5),
        0.2 * (stage.scale / 4.5));
    }
    drawVfx("fireburst", new Vec2D(-10 + 20 * Math.random() + vfxQueue[j][2].x, -10 + 20 * Math.random() + vfxQueue[
      j][2].y), 6)
    drawVfx("burncircle", new Vec2D(-10 + 20 * Math.random() + vfxQueue[j][2].x, -10 + 20 * Math.random() +
      vfxQueue[j][2].y), 1);
  },
  burncircle: function(j) {
    //rgb(253,255,161)
    //rgb(198, 57, 5)
    var col = blendColours([253, 255, 161], [198, 57, 5], vfxQueue[j][1] / 9);
    fg2.fillStyle = makeColour(col[0], col[1], col[2], 1 - vfxQueue[j][1] / 9);
    fg2.beginPath();
    fg2.arc((vfxQueue[j][2].x * stage.scale) + stage.offset[0], ((vfxQueue[j][2].y + vfxQueue[j][1]) * -stage.scale) +
      stage.offset[1], 3 * stage.scale, 0, twoPi);
    fg2.closePath();
    fg2.fill();
  },
  electrichit: function(j) {
    var s = stage.scale / 4.5;
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    switch (vfxQueue[j][1]) {
      case 1:
        fg2.fillStyle = makeColour(133, 122, 250, 0.62);
        fg2.beginPath();
        fg2.arc(0, 0, 20, 0, twoPi);
        fg2.closePath();
        fg2.fill();
        fg2.beginPath();
        fg2.moveTo(0, 30);
        fg2.lineTo(5, 5);
        fg2.lineTo(30, 0);
        fg2.lineTo(5, -5);
        fg2.lineTo(0, -30);
        fg2.lineTo(-5, -5);
        fg2.lineTo(-30, 0);
        fg2.lineTo(-5, 5);
        fg2.closePath();
        fg2.fill();
        break;
      case 2:
        drawArrayPath(fg2, "rgb(50,252,162)", vfxQueue[j][3], 0, 0, vfx.normalhit.path1, 0.2 * (stage.scale / 4.5),
          0.2 * (stage.scale / 4.5));
        break;
      case 3:
        drawArrayPath(fg2, "rgb(0,0,0)", vfxQueue[j][3], 0, 0, vfx.normalhit.path2, 0.2 * (stage.scale / 4.5), 0.2 *
          (stage.scale / 4.5));
        break;
      case 4:
        drawArrayPath(fg2, "rgb(198,222,255)", vfxQueue[j][3], 0, 0, vfx.normalhit.path2, 0.2 * (stage.scale / 4.5),
          0.2 * (stage.scale / 4.5));
        break;
      case 5:
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, "rgb(0,0,0)", vfxQueue[j][3], 0, 0, vfx.normalhit.path3[n], 0.2 * (vfxQueue[j][1] / 7) *
            (stage.scale / 4.5), 0.2 * (vfxQueue[j][1] / 7) * (stage.scale / 4.5));
        }
        break;
      case 6:
        for (var n = 0; n < vfx.normalhit.path3.length; n++) {
          drawArrayPath(fg2, "rgb(139,130,242)", vfxQueue[j][3], 0, 0, vfx.normalhit.path3[n], 0.2 * (vfxQueue[j][1] /
            7) * (stage.scale / 4.5), 0.2 * (vfxQueue[j][1] / 7) * (stage.scale / 4.5));
        }
        break;
      default:
        break;
    }
    fg2.fillStyle = "rgb(209, 181, 255)";
    if (vfxQueue[j][1] < 13) {
      for (var i = 0; i < 2; i++) {
        fg2.beginPath();
        fg2.arc((-30 + 60 * Math.random()) * s, (-30 + 60 * Math.random()) * s, 4 * s, 0, twoPi);
        fg2.closePath();
        fg2.fill();
      }
    }
    fg2.strokeStyle = "rgb(209, 181, 255)";
    fg2.lineWidth = 2;
    fg2.beginPath();
    for (var i = 0; i < 4 - (Math.round(vfxQueue[j][1] / 4)); i++) {
      var start = new Vec2D((-30 + 60 * Math.random()), (-30 + 60 * Math.random()));
      fg2.moveTo(start.x * s, start.y * s);
      var next1 = new Vec2D(start.x + (-10 + Math.random() * 20), start.y + (-10 + Math.random() * 20));
      var next2 = new Vec2D(next1.x + (-10 + Math.random() * 20), next1.y + (-10 + Math.random() * 20));
      var next3 = new Vec2D(next2.x + (-10 + Math.random() * 20), next2.y + (-10 + Math.random() * 20));
      fg2.lineTo(next1.x * s, next1.y * s);
      fg2.lineTo(next2.x * s, next2.y * s);
      fg2.lineTo(next3.x * s, next3.y * s);
    }
    fg2.closePath();
    fg2.stroke();

    fg2.restore();
  },
  shocked: function(j) {
    var s = stage.scale / 4.5;
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.fillStyle = "rgb(209, 181, 255)";
    for (var i = 0; i < 1; i++) {
      fg2.beginPath();
      fg2.arc((-30 + 60 * Math.random()) * s, (-30 + 60 * Math.random()) * s, 4 * s, 0, twoPi);
      fg2.closePath();
      fg2.fill();
    }
    fg2.strokeStyle = "rgb(209, 181, 255)";
    fg2.lineWidth = 2;
    fg2.beginPath();
    for (var i = 0; i < 1; i++) {
      var start = new Vec2D((-30 + 60 * Math.random()), (-30 + 60 * Math.random()));
      fg2.moveTo(start.x * s, start.y * s);
      var next1 = new Vec2D(start.x + (-10 + Math.random() * 20), start.y + (-10 + Math.random() * 20));
      var next2 = new Vec2D(next1.x + (-10 + Math.random() * 20), next1.y + (-10 + Math.random() * 20));
      var next3 = new Vec2D(next2.x + (-10 + Math.random() * 20), next2.y + (-10 + Math.random() * 20));
      fg2.lineTo(next1.x * s, next1.y * s);
      fg2.lineTo(next2.x * s, next2.y * s);
      fg2.lineTo(next3.x * s, next3.y * s);
    }
    fg2.closePath();
    fg2.stroke();
    fg2.restore();
  },
  shine: function(j) {
    fg2.save();
    var tX = (vfxQueue[j][2].x * stage.scale) + stage.offset[0];
    var tY = (vfxQueue[j][2].y * -stage.scale) + stage.offset[1];
    fg2.fillStyle = makeColour(77, 108, 217, 0.5);
    if (vfxQueue[j][1] == 1) {
      drawHexagon(7 * stage.scale, tX, tY, 20);
      fg2.fillStyle = "rgb(255, 255, 255)";
      drawHexagon(4 * stage.scale, tX, tY, 3);
      var r = 6 * stage.scale;
      var a = r * Math.sin(Math.PI / 6);
      var b = r * Math.cos(Math.PI / 6);
      fg2.translate(tX, tY);
      fg2.beginPath();
      fg2.moveTo(0, r);
      fg2.lineTo(b, r - a);
      fg2.lineTo(b, -r + a);
      fg2.lineTo(0, -r);
      fg2.closePath();
      fg2.fill();
    } else if (vfxQueue[j][1] == 2) {
      drawHexagon(8 * stage.scale, tX, tY, 20);
      fg2.fillStyle = "rgb(255, 255, 255)";
      drawHexagon(6 * stage.scale, tX, tY, 3);
      fg2.translate(tX, tY);
      var r = 7 * stage.scale;
      var a = r * Math.sin(Math.PI / 6);
      var b = r * Math.cos(Math.PI / 6);
      fg2.beginPath();
      fg2.moveTo(-b, r - a);
      fg2.lineTo(0, r);
      fg2.lineTo(b, r - a);
      fg2.lineTo(b, -r + a);
      fg2.closePath();
      fg2.fill();
    } else {
      drawHexagon(10 * stage.scale, tX, tY, 20);
      fg2.fillStyle = "rgb(255, 255, 255)";
      drawHexagon(8 * stage.scale, tX, tY, 3);
      fg2.translate(tX, tY);
      var r = 9 * stage.scale;
      var a = r * Math.sin(Math.PI / 6);
      var b = r * Math.cos(Math.PI / 6);
      fg2.beginPath();
      fg2.moveTo(-b, -r + a);
      fg2.lineTo(-b, r - a);
      fg2.lineTo(0, r);
      fg2.lineTo(b, r - a);
      fg2.closePath();
      fg2.fill();
    }
    fg2.restore();
  },
  shineloop: function(j) {
    fg2.save();
    var part = Math.round(vfxQueue[j][1] / 2);
    var tX = (player[vfxQueue[j][3]].phys.pos.x * stage.scale) + stage.offset[0];
    var tY = ((player[vfxQueue[j][3]].phys.pos.y + 6) * -stage.scale) + stage.offset[1];
    var part = Math.round(player[vfxQueue[j][3]].shineLoop / 2);
    fg2.fillStyle = "rgb(143, 228, 255)";
    if (part == 1) {
      drawHexagon(4 * stage.scale, tX, tY, 14);
    } else if (part == 2) {
      drawHexagon(6 * stage.scale, tX, tY, 14);
    } else if (part == 3) {
      drawHexagon(8 * stage.scale, tX, tY, 14);
    } else {
      console.log(vfxQueue[j][3]);
    }
    fg2.restore();
  },
  firefoxcharge: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    var secondFrame = (vfxQueue[j][4] + 4) % 10;
    drawArrayPathNew(fg2, makeColour(237, 219, 53, 0.3), vfxQueue[j][3], 0, 0, vfx.firefoxcharge.path[secondFrame],
      0.35 * (stage.scale / 4.5), 0.5 * (stage.scale / 4.5), 0, 0, 0);
    drawArrayPathNew(fg2, "rgb(255, 218, 163)", vfxQueue[j][3], 0, 0, vfx.firefoxcharge.path[vfxQueue[j][4]], 0.35 *
      (stage.scale / 4.5), 0.5 * (stage.scale / 4.5), 0, 0, 0);
    fg2.restore();
  },
  firefoxlaunch: function(j) {
    var p = vfxQueue[j][4];
    if (player[p].actionState == "UPSPECIALLAUNCH") {
      fg2.save();
      var frame = (player[p].timer - 1) % 4;

      fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
        1]);

      var fireGrad = fg2.createLinearGradient(0, -130, 0, 20);
      if (frame % 2) {
        var col = "rgb(255, 218, 163)";
        fireGrad.addColorStop(0, "rgb(255, 232, 198)");
        fireGrad.addColorStop(0.6, makeColour(251, 187, 90, 0.9));
        fireGrad.addColorStop(1, makeColour(182, 45, 9, 0.3));
      } else {
        var col = "rgb(223, 83, 39)";
        fireGrad.addColorStop(0, "rgb(223, 83, 39)");
        fireGrad.addColorStop(0.6, makeColour(210, 59, 26, 0.9));
        fireGrad.addColorStop(1, makeColour(158, 34, 12, 0.3));
      }
      drawArrayPathNew(fg2, fireGrad, vfxQueue[j][3], 0, 0, vfx.firefoxlaunch.path[frame], 0.35 * (stage.scale /
          4.5), 0.35 * (stage.scale / 4.5), player[p].rotation, player[p].rotationPoint.x, player[p].rotationPoint
        .y);
      fg2.restore();
    }
  },
  firefoxtail: function(j) {
    if (vfxQueue[j][5] == undefined || vfxQueue[j][5] == null) {
      vfxQueue[j].push([Math.random(), Math.random(), Math.random(), Math.random()]);
    }
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], ((vfxQueue[j][2].y + 4) * -stage.scale) +
      stage.offset[1]);
    fg2.fillStyle = makeColour(Math.max(149, 251 - (vfxQueue[j][1] * 5)), Math.max(149, 187 - (vfxQueue[j][1] * 5)),
      Math.min(149, 90 + (vfxQueue[j][1] * 5)), (1 - (vfxQueue[j][1] / 15)));
    fg2.beginPath();
    fg2.arc((-2 + vfxQueue[j][5][0] * 4) * stage.scale, (-2 + vfxQueue[j][5][1] * 4) * stage.scale, 4 * stage.scale,
      0, twoPi);
    fg2.closePath();
    fg2.fill();
    fg2.fillStyle = makeColour(Math.max(149, 223 - (vfxQueue[j][1] * 5)), Math.min(149, 83 + (vfxQueue[j][1] * 5)),
      Math.min(149, 39 + (vfxQueue[j][1] * 5)), (1 - (vfxQueue[j][1] / 15)));
    fg2.beginPath();
    fg2.arc((-2 + vfxQueue[j][5][2] * 4) * stage.scale, (-2 + vfxQueue[j][5][3] * 4) * stage.scale, 2 * stage.scale,
      0, twoPi);
    fg2.closePath();
    fg2.fill();
    fg2.restore();
  },
  laser: function(j) {
    fg2.save();
    fg2.translate((vfxQueue[j][2].x * stage.scale) + stage.offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[
      1]);
    fg2.rotate(-vfxQueue[j][4] * vfxQueue[j][3]);

    fg2.lineWidth = 3;
    if (vfxQueue[j][1] > 3) {
      fg2.strokeStyle = makeColour(255, 59, 59, (1 - (vfxQueue[j][1] - 4) / 6));
      fg2.beginPath();
      fg2.arc(0, 0, (-0.1 + vfxQueue[j][1] * 0.6) * stage.scale, 0, twoPi);
      fg2.closePath();
      fg2.stroke();
    }
    fg2.fillStyle = makeColour(255, 57, 87, Math.min(1, (1 - (vfxQueue[j][1] - 4) / 6)));
    fg2.beginPath();
    fg2.moveTo((-vfxQueue[j][1] * 1) * vfxQueue[j][3] * stage.scale, (-1.6 - vfxQueue[j][1] * 1.6) * stage.scale);
    fg2.lineTo((-2.3 - vfxQueue[j][1] * 1) * vfxQueue[j][3] * stage.scale, (-2.4 - vfxQueue[j][1] * 1.6) * stage.scale);
    fg2.lineTo((-2.3 - vfxQueue[j][1] * 1) * vfxQueue[j][3] * stage.scale, (2.4 + vfxQueue[j][1] * 1.6) * stage.scale);
    fg2.lineTo((-vfxQueue[j][1] * 1) * vfxQueue[j][3] * stage.scale, (1.6 + vfxQueue[j][1] * 1.6) * stage.scale);
    fg2.closePath();
    fg2.fill();
    fg2.restore();
  },
  illusion: function(j) {
    if (!(vfxQueue[j][1] % 2)) {
      drawArrayPathNew(fg2, makeColour(68, 244, 255, 0.5), vfxQueue[j][3], (vfxQueue[j][2].x * stage.scale) + stage
        .offset[0], (vfxQueue[j][2].y * -stage.scale) + stage.offset[1], vfx.illusion.path, 0.35 * (stage.scale /
          4.5), 0.35 * (stage.scale / 4.5), 0, 0, 0);
    }
  },   
  sing : function(j){
    singGen(j, 2, 6, 0, 4.5,0.5); // see singGen function for meaning of parameters
  },
  sing2 : function(j){
    singGen(j, 3, 8, 3.5, -5,1.3);
  },
  sing3 : function(j){
    singGen(j, 5, 10, 7.1, 0.2,0);
  }
};

// singGen produces sing vfx according to different parameters
// rMin: initial note radius
// rMax: final note radius
// notePhase: angle offset for notes
// posScale: modifier to account for how much the sing vfx should move left to right to follow the animation
// posPhase : phase offset for the sing vfx left/right movement
function singGen (j, rMin, rMax, notePhase, posScale, posPhase){
    fg2.save();
    var p = vfxQueue[j][3];
     // total 31
    // fade out on 26
    // 5 frames of fade in, full opacity on frame 6
    var frame = vfxQueue[j][1];
    var pos = new Vec2D(player[p].phys.pos.x,player[p].phys.pos.y+8);
    let lrScaling = posScale * player[p].phys.face;
    fg2.translate((pos.x * stage.scale) + stage.offset[0] + lrScaling*Math.cos(frame/6.5+posPhase), (pos.y * -stage.scale) + stage.offset[1] - 2.5*Math.sin(frame/8));
    // cos/sin functions account for the character animation moving the sing vfx
    const opaqMultiplier = 0.8;
    var opaq = 1*opaqMultiplier;  //opacity
    if (frame < 6) {
      opaq = opaqMultiplier*frame/6;
    }
    else if (frame > 25) {
      opaq = opaqMultiplier*(1-((frame-25)/6));
    }
    fg2.strokeStyle = "rgba(244, 212, 45,"+opaq+")";
    fg2.lineWidth = 3;
    for (var i=0;i<5;i++){
      fg2.beginPath();
      fg2.arc(0,0,i*2*stage.scale,0,twoPi);
      fg2.closePath();
      fg2.stroke();
    }
    var angles = [notePhase+frame*0.1,notePhase+2*Math.PI/3+frame*0.1,notePhase+4*Math.PI/3+frame*0.1];
    var r = rMax; // distance of notes from center
    if (frame < 15) {
      r = rMin + frame*(rMax-rMin)/15;
    }
    var col = ["rgba(175,39,17,"+opaq+")","rgba(116,164,16,"+opaq+")","rgba(17,75,112,"+opaq+")"];
    for (var i=0;i<3;i++){
      drawArrayPathNew(fg2, col[i], 1, ((r*Math.cos(angles[i])-3) * stage.scale),((r*Math.sin(angles[i])+3)*-stage.scale), vfx.sing.path, 0.7 * (stage.scale /
          4.5), 0.7 * (stage.scale / 4.5), 0, 0, 0);
    }    
    fg2.restore();
  };

export function makeColour (r,g,b,a){
    // maybe some hsl too
    if (transparency){
        return "rgba("+r+","+g+","+b+","+a+")";
    }
    else {
        return "rgb("+r+","+g+","+b+")";
    }
}
export function drawHexagon (r,tX,tY,width){
  fg2.save();
  fg2.translate(tX, tY);
  var a = r * Math.sin(Math.PI / 6);
  var b = r * Math.cos(Math.PI / 6);
  fg2.beginPath();
  fg2.moveTo(0, r);
  fg2.lineTo(b, r - a);
  fg2.lineTo(b, -r + a);
  fg2.lineTo(0, -r);
  fg2.lineTo(-b, -r + a);
  fg2.lineTo(-b, r - a);
  fg2.lineTo(0, r);
  var rs = r - width;
  var a = rs * Math.sin(Math.PI / 6);
  var b = rs * Math.cos(Math.PI / 6);
  fg2.moveTo(0, rs);
  fg2.lineTo(-b, rs - a);
  fg2.lineTo(-b, -rs + a);
  fg2.lineTo(0, -rs);
  fg2.lineTo(b, -rs + a);
  fg2.lineTo(b, rs - a);
  fg2.lineTo(0, rs);
  fg2.closePath();
  fg2.fill();
  fg2.restore();
}
